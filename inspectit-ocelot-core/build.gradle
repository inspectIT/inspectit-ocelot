import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    alias(libs.plugins.meChampeauJmh)
    alias(libs.plugins.orgCyclonedxBom)
    alias(libs.plugins.orgSpringframeworkBoot) apply false
    alias(libs.plugins.ioSpringDependencyManagement)
}

dependencyManagement {
    imports {
        mavenBom(SpringBootPlugin.BOM_COORDINATES)
    }
}

configurations {
    buildTools
}

test {
    useJUnitPlatform()

    jvmArgs '-Xmx512m', '-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=/__w/inspectit-ocelot/inspectit-ocelot/test_heapdump.bin'
    // enable reflection used in relation with OpenTelemetry for JDK 11 and later
    if (JavaVersion.current() >= JavaVersion.VERSION_11) {
        // --add-opens has the following syntax: {A}/{package}={B}
        jvmArgs "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED"
    }
    testLogging {
        exceptionFormat = 'full'
    }
}


sourceCompatibility = 1.8 // Java version compatibility to use when compiling Java source.
targetCompatibility = 1.8 // Java version to generate classes for.


dependencies {
    compileOnly(
            project(':inspectit-ocelot-bootstrap'),
            libs.orgProjectlombokLombok,

            // OpenTelemetry
            platform(libs.ioOpentelemetryOpentelemetryBom),
            platform(libs.ioOpentelemetryOpentelemetryBomAlpha),
            libs.ioOpentelemetryOpentelemetryApi,
            libs.ioOpentelemetryOpentelemetrySdk,
            libs.ioOpentelemetryOpentelemetrySdkMetrics,
            libs.ioOpentelemetryOpentelemetrySemconv,
            // OC-OTel bridge
            libs.ioOpentelemetryOpentelemetryOpencensusShim,


    )
    annotationProcessor libs.orgProjectlombokLombok

    implementation(
            project(':inspectit-ocelot-config'),
            project(':inspectit-ocelot-sdk'),

            // spring related
            libs.orgSpringframeworkBootSpringBoot,
            libs.orgYamlSnakeyaml,
            libs.javaxAnnotationJavaxAnnotationApi, //Required for @PostConstruct and @PreDestroy to work in Java9+

            // data validation
            libs.orgApacheTomcatEmbedTomcatEmbedEl,
            libs.orgHibernateValidatorHibernateValidator,

            // logging
            libs.chQosLogbackLogbackClassic,
            // logstash support (JSON logging)
            libs.netLogstashLogbackLogstashLogbackEncoder,

            // jetty HTTP server for REST-API
            // we use jetty instead of Spring-Boot-Web since it's more lightweight and
            // it 's easier to adapt changes from the config-server
            libs.orgEclipseJettyJettyServer,
            libs.orgeclipseJettyJettyServlet,

            // utils
            libs.orgApacheCommonsCommonsLang3,
            libs.orgApacheCommonsCommonsMath3,
            libs.orgApacheHttpcomponentsHttpclient,
            libs.commonsIo,
            libs.piccolo,
            libs.comFasterxmlJacksonCoreJacksonDatabind,
            libs.ioGithubResilience4jResilience4jRetry,

            libs.orgJavassist,

            // Metrics exporters
            libs.ioPrometheusSimpleclientHttpserver,

            // this overwrites version of guava that opencensus-impl pulls in transitively, too.
            libs.comGoogleGuava,
            // we still need the OpenCensus SDK for the metric exporters to work, as the shim only includes opencensus-impl-core
            libs.ioOpencensusOpencensusImpl,

            // OpenTelemetry exporters
            platform(libs.ioOpentelemetryOpentelemetryBom),
            libs.ioOpentelemetryOpentelemetryExporterLogging,
            libs.ioOpentelemetryOpentelemetryExporterJaeger,
            libs.ioOpentelemetryOpentelemetryExporterJaegerThrift,
            libs.ioOpentelemetryOpentelemetryExporterZipkin,
            libs.ioOpentelemetryOpentelemetryExporterOtlp,
            // Update okio, due to security concerns
            libs.comSquareupOkio,

            platform(libs.ioOpentelemetryOpentelemetryBomAlpha),
            libs.ioOpentelemetryOpentelemetryExporterPrometheus,

            // The following dependency is required for the OC-exporter to work correctly and must be matched against the grpc version
            // See https://github.com/census-instrumentation/opencensus-java/blob/master/exporters/trace/ocagent/README.md
            libs.ioNettyNettyTcnativeBoringsslStatic,

            libs.rocksInspectitOpencensusInfluxdbExporter,

            // bytecode manipulation
            libs.netBytebuddyByteBuddy
    )

    testImplementation(
            project(':inspectit-ocelot-bootstrap'),
            platform(libs.ioOpentelemetryOpentelemetryBom),
            platform(libs.ioOpentelemetryOpentelemetryBomAlpha),
            libs.ioOpentelemetryOpentelemetrySdk,
            libs.ioOpentelemetryOpentelemetrySdkMetrics,
            libs.ioOpentelemetryOpentelemetryOpencensusShim,
            libs.ioOpentelemetryOpentelemetrySemconv,
            libs.ioOpentelemetryOpentelemetrySdkTesting,
            libs.ioOpentelemetryOpentelemetryProto,

            libs.orgSpringframeworkSpringTest,

            libs.orgJunitJupiterJunitJupiterApi,
            libs.orgMockitoMockitoJunitJupiter,

            // to make use of SpyBean
            libs.orgSpringframeworkBootSpringBootTest,

            libs.orgMockitoMockitoCore,
            libs.orgAssertjAssertjCore,
            libs.orgAssertjAssertjGuava,
            libs.orgAwaitility,
            libs.comGithubTomakehurstWiremockJre8,
            libs.ioGrpcGrpcNettyShaded,
            libs.ioGrpcGrpcStub,
            libs.orgInfluxdbInfluxdbJava,
            libs.ioApisenseEmbedInfluxEmbedInfluxDB,

            // for docker test containers
            libs.orgTestcontainers,
            libs.orgTestcontainersJunitJupiter,

            // ServerExtension
            libs.comLinecorpArmeriaArmeriaJunit5,
            libs.comLinecorpArmeriaArmeriaGrpcProtocol,

            libs.comGoogleProtobufProtobufJavaUtil,

            // LogCapturer
            libs.ioGithubNetmikeyLogunitLogunitCore,
            // jul-slf4j bridge needed to redirect OTEL logs using java.util.logging to logback
            libs.orgSlf4jJulToSlf4j,
    )
    testRuntimeOnly(
            libs.orgJunitJupiterJunitJupiterEngine,
            // LogCapturer
            libs.ioGithubNetmikeyLogunitLogunitLogback,
    )

    jmh(
            project(':inspectit-ocelot-bootstrap')
    )

    constraints {
        implementation(libs.orgYamlSnakeyaml) {
            because 'security issues'
        }
        implementation(libs.comGoogleGuava) {
            because 'security issues'
        }
        implementation(libs.comSquareupOkio) {
            because 'security issues'
        }
    }
}

apply plugin: 'java'
task compileJarCheck(type: JavaCompile){
    source = sourceSets.main.java.srcDirs
    include 'com/mindprod/jarcheck/JarCheck.java'
    classpath = sourceSets.main.compileClasspath
    destinationDirectory =  new File("${buildDir}/classes/java/main")
}

// use jarCheck to make sure all classes in our dependencies are at maximum in version 1.8
task checkDependencyJavaVersions {
    def jarCheckPath = "$buildDir/jarCheck"
    outputs.dir jarCheckPath

    doFirst {
        def jarCheckOutput = new File(jarCheckPath)
        jarCheckOutput.mkdirs()
        configurations.runtimeClasspath.each { file ->
            def name = file.name
            if (file.exists()) {
                javaexec {
                    mainClass = 'com.mindprod.jarcheck.JarCheck'
                    classpath = sourceSets.main.runtimeClasspath
                    args = ["$file", "1.0", "1.8"]
                    standardOutput = new File(jarCheckOutput, "$name-check.log").newOutputStream()
                }
            }
        }
    }
}
checkDependencyJavaVersions.dependsOn compileJarCheck

task generateVersionFile {
    ext.versionFile = new File(buildDir, "ocelot-version.info")
    doLast {
        def currentDate = new Date().toString()
        def openTelemetry = libs.versions.ioOpentelemetry.get()
        ext.versionFile.withWriter('UTF-8') { writer ->
            writer << "$version\n$openTelemetry\n$currentDate"
        }
    }
}

cyclonedxBom {
    includeConfigs = ["runtimeClasspath"]
    schemaVersion = "1.4"
    projectType = "application"
}

jar.dependsOn checkDependencyJavaVersions
jar.dependsOn generateVersionFile

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    archiveFileName = "${project.name}.jar"

    // include version file
    from generateVersionFile.versionFile

    //include all "implementation" dependencies in fat jar
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/**
 * JMH-Perf tests.
 */
jmhJar {
    doFirst {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }
}
jmh {

    /**
     * Use -PjmhInclude='regular expression' to specify what tests to run with JMH.
     */
    if (project.hasProperty('jmhInclude')) {
        String regex = project.getProperty('jmhInclude')
        println "Filtering for JMH-Tests matching to regex: " + regex
        include = [regex]
    }

    /**
     * Use -jmhProfiler='profiler name and settings' to specify what profiler to run with JMH.
     */
    if (project.hasProperty('jmhProfiler')) {
        String profiler = project.getProperty('jmhProfiler')
        println "Using profiler for JMH tests: " + profiler
        profilers = [profiler]
    }

    /**
     * Use -jmhFlightRecorder=true to add Flight recorder options to the JVM args. You'll need openJDK 11 or OracleJDK 8.
     */
    if (project.hasProperty('jmhFlightRecorder')) {
        def recordingFile = "rec-jmh-${project.name}-${System.currentTimeMillis()}.jfr"
        def frProperties = "-XX:StartFlightRecording=duration=10s,delay=3s,filename=${recordingFile}".toString()
        jvmArgs = ['-XX:+UnlockCommercialFeatures', '-XX:+FlightRecorder', '-XX:+UnlockDiagnosticVMOptions', '-XX:+DebugNonSafepoints', frProperties, '-Djavax.xml.parsers.SAXParserFactory=com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl']
    }

    // output of results and duplicateClassesStrategy
    humanOutputFile = file("$buildDir/jmh/human.txt")
    resultsFile = file("$buildDir/jmh/results.txt")
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE

    // shared settings if not defined on the class level
    warmupIterations = 3
    warmup = '1s'
    iterations = 10
    timeOnIteration = '1s'
    fork = 1
}
