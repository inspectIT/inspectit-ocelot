import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id "me.champeau.jmh" version "${jmhVersion}"
    id "org.cyclonedx.bom" version "${cyclonedxBomVersion}"
    id "org.owasp.dependencycheck" version "${owaspDependencycheckVersion}"
    id "org.springframework.boot" version "${springBootVersion}" apply false
    id "io.spring.dependency-management" version "${springDependencyManangementVersion}"
}

dependencyManagement {
    imports {
        mavenBom(SpringBootPlugin.BOM_COORDINATES)
    }
}

configurations {
    buildTools
}

test {
    useJUnitPlatform()

    jvmArgs '-Xmx512m', '-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=/__w/inspectit-ocelot/inspectit-ocelot/test_heapdump.bin'
    // enable reflection used in relation with OpenTelemetry for JDK 11 and later
    if (JavaVersion.current() >= JavaVersion.VERSION_11) {
        // --add-opens has the following syntax: {A}/{package}={B}
        jvmArgs "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED"
    }
    testLogging {
        exceptionFormat = 'full'
    }
}


sourceCompatibility = 1.8 // Java version compatibility to use when compiling Java source.
targetCompatibility = 1.8 // Java version to generate classes for.


dependencies {
    compileOnly(
            project(':inspectit-ocelot-bootstrap'),
            "org.projectlombok:lombok",

            // OpenTelemetry
            platform("io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}"),
            platform("io.opentelemetry:opentelemetry-bom-alpha:${openTelemetryAlphaVersion}"),
            'io.opentelemetry:opentelemetry-api',
            "io.opentelemetry:opentelemetry-sdk",
            "io.opentelemetry:opentelemetry-sdk-metrics",
            "io.opentelemetry:opentelemetry-semconv",
            // OC-OTel bridge
            "io.opentelemetry:opentelemetry-opencensus-shim",


    )
    annotationProcessor "org.projectlombok:lombok"

    implementation(
            project(':inspectit-ocelot-config'),
            project(':inspectit-ocelot-sdk'),

            // spring related
            "org.springframework.boot:spring-boot",
            "org.yaml:snakeyaml:${snakeYamlVersion}",
            "javax.annotation:javax.annotation-api", //Required for @PostConstruct and @PreDestroy to work in Java9+

            // data validation
            "org.apache.tomcat.embed:tomcat-embed-el",
            "org.hibernate.validator:hibernate-validator",

            // logging
            "ch.qos.logback:logback-classic",
            // logstash support (JSON logging)
            "net.logstash.logback:logstash-logback-encoder:${logstashLogBackEncoderVersion}",

            // utils
            "org.apache.commons:commons-lang3",
            "org.apache.commons:commons-math3:${commonsMathVersion}",
            "org.apache.httpcomponents:httpclient",
            "commons-io:commons-io:${commonsIoVersion}",
            "piccolo:piccolo:${piccoloVersion}",
            "com.fasterxml.jackson.core:jackson-databind",

            "org.javassist:javassist:${javassistVersion}",

            // Metrics exporters
            "io.prometheus:simpleclient_httpserver",

            // this overwrites version of guava that opencensus-impl pulls in transitively, too.
            "com.google.guava:guava:${guavaVersion}",
            // we still need the OpenCensus SDK for the metric exporters to work, as the shim only includes opencensus-impl-core
            "io.opencensus:opencensus-impl:${openCensusVersion}",

            // OpenTelemetry exporters
            platform("io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}"),
            "io.opentelemetry:opentelemetry-exporter-logging",
            "io.opentelemetry:opentelemetry-exporter-jaeger",
            "io.opentelemetry:opentelemetry-exporter-jaeger-thrift",
            "io.opentelemetry:opentelemetry-exporter-zipkin",
            "io.opentelemetry:opentelemetry-exporter-otlp",

            platform("io.opentelemetry:opentelemetry-bom-alpha:${openTelemetryAlphaVersion}"),
            "io.opentelemetry:opentelemetry-exporter-prometheus",

            // The following dependency is required for the OC-exporter to work correctly and must be matched against the grpc version
            // See https://github.com/census-instrumentation/opencensus-java/blob/master/exporters/trace/ocagent/README.md
            "io.netty:netty-tcnative-boringssl-static:${tcnativeVersion}",

            "rocks.inspectit:opencensus-influxdb-exporter:${opencensusInfluxdbExporter}",

            // bytecode manipulation
            "net.bytebuddy:byte-buddy"
    )

    testImplementation(
            project(':inspectit-ocelot-bootstrap'),
            platform("io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}"),
            platform("io.opentelemetry:opentelemetry-bom-alpha:${openTelemetryAlphaVersion}"),
            "io.opentelemetry:opentelemetry-sdk",
            "io.opentelemetry:opentelemetry-sdk-metrics",
            "io.opentelemetry:opentelemetry-opencensus-shim",
            "io.opentelemetry:opentelemetry-semconv",
            "io.opentelemetry:opentelemetry-sdk-testing",
            "io.opentelemetry:opentelemetry-proto:${opentelemetryProtoVersion}",

            'org.springframework:spring-test',

            "org.junit.jupiter:junit-jupiter-api",
            "org.mockito:mockito-junit-jupiter",

            // to make use of SpyBean
            "org.springframework.boot:spring-boot-test",

            "org.mockito:mockito-core",
            "org.assertj:assertj-core",
            "org.assertj:assertj-guava:${assertjGuavaVersion}",
            "org.awaitility:awaitility",
            "com.github.tomakehurst:wiremock-jre8:${wiremockVersion}",
            "io.grpc:grpc-netty-shaded:${grpcVersion}",
            "io.grpc:grpc-stub:${grpcVersion}",
            "org.influxdb:influxdb-java:${influxdbJavaVersion}",
            "io.apisense.embed.influx:embed-influxDB:${embedInfluxdbVersion}",

            // for docker test containers
            "org.testcontainers:testcontainers:${testContainersVersion}",
            "org.testcontainers:junit-jupiter:${testContainersVersion}",

            // ServerExtension
            "com.linecorp.armeria:armeria-junit5:${armeriaVersion}",
            "com.linecorp.armeria:armeria-grpc-protocol:${armeriaVersion}",

            "com.google.protobuf:protobuf-java-util:${protobufJavaUtilVersion}",

            // LogCapturer
            "io.github.netmikey.logunit:logunit-core:${logUnitVersion}",
            // jul-slf4j bridge needed to redirect OTEL logs using java.util.logging to logback
            "org.slf4j:jul-to-slf4j",
    )
    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine",
            // LogCapturer
            "io.github.netmikey.logunit:logunit-logback:${logUnitVersion}",
    )

    jmh(
            project(':inspectit-ocelot-bootstrap')
    )

}

apply plugin: 'java'
task compileJarCheck(type: JavaCompile){
    source = sourceSets.main.java.srcDirs
    include 'com/mindprod/jarcheck/JarCheck.java'
    classpath = sourceSets.main.compileClasspath
    destinationDir =  new File("${buildDir}/classes/java/main")
}

// use jarCheck to make sure all classes in our dependencies are at maximum in version 1.8
task checkDependencyJavaVersions {
    def jarCheckPath = "$buildDir/jarCheck"
    outputs.dir jarCheckPath

    doFirst {
        def jarCheckOutput = new File(jarCheckPath)
        jarCheckOutput.mkdirs()
        configurations.runtimeClasspath.each { file ->
            def name = file.name
            if (file.exists()) {
                javaexec {
                    mainClass = 'com.mindprod.jarcheck.JarCheck'
                    classpath = sourceSets.main.runtimeClasspath
                    args = ["$file", "1.0", "1.8"]
                    standardOutput = new File(jarCheckOutput, "$name-check.log").newOutputStream()
                }
            }
        }
    }
}
checkDependencyJavaVersions.dependsOn compileJarCheck

task generateVersionFile {
    ext.versionFile = new File(buildDir, "ocelot-version.info")
    doLast {
        def currentDate = new Date().toString()
        ext.versionFile.withWriter('UTF-8') { writer ->
            writer << "$version\n$openTelemetryVersion\n$currentDate"
        }
    }
}

cyclonedxBom {
    includeConfigs = ["runtimeClasspath"]
    schemaVersion = "1.4"
    projectType = "application"
}

jar.dependsOn checkDependencyJavaVersions
jar.dependsOn generateVersionFile

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    archiveName = "${project.name}.jar"

    // include version file
    from generateVersionFile.versionFile

    //include all "implementation" dependencies in fat jar
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/**
 * JMH-Perf tests.
 */
jmhJar {
    doFirst {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }
}
jmh {

    /**
     * Use -PjmhInclude='regular expression' to specify what tests to run with JMH.
     */
    if (project.hasProperty('jmhInclude')) {
        String regex = project.getProperty('jmhInclude')
        println "Filtering for JMH-Tests matching to regex: " + regex
        include = [regex]
    }

    /**
     * Use -jmhProfiler='profiler name and settings' to specify what profiler to run with JMH.
     */
    if (project.hasProperty('jmhProfiler')) {
        String profiler = project.getProperty('jmhProfiler')
        println "Using profiler for JMH tests: " + profiler
        profilers = [profiler]
    }

    /**
     * Use -jmhFlightRecorder=true to add Flight recorder options to the JVM args. You'll need openJDK 11 or OracleJDK 8.
     */
    if (project.hasProperty('jmhFlightRecorder')) {
        def recordingFile = "rec-jmh-${project.name}-${System.currentTimeMillis()}.jfr"
        def frProperties = "-XX:StartFlightRecording=duration=10s,delay=3s,filename=${recordingFile}".toString()
        jvmArgs = ['-XX:+UnlockCommercialFeatures', '-XX:+FlightRecorder', '-XX:+UnlockDiagnosticVMOptions', '-XX:+DebugNonSafepoints', frProperties, '-Djavax.xml.parsers.SAXParserFactory=com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl']
    }

    // output of results and duplicateClassesStrategy
    humanOutputFile = file("$buildDir/jmh/human.txt")
    resultsFile = file("$buildDir/jmh/results.txt")
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE

    // shared settings if not defined on the class level
    warmupIterations = 3
    warmup = '1s'
    iterations = 10
    timeOnIteration = '1s'
    fork = 1
}
