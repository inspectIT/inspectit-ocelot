plugins {
    id "me.champeau.gradle.jmh" version "0.4.8"
}

apply plugin: 'java'

configurations {
    buildTools
}

test {
    useJUnitPlatform()

    jvmArgs '-Xmx512m', '-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=/__w/inspectit-ocelot/inspectit-ocelot/test_heapdump.bin'

    testLogging {
        exceptionFormat = 'full'
    }
}

sourceCompatibility = 1.8

dependencies {
    compileOnly(
            project(':inspectit-ocelot-bootstrap'),
            "io.opencensus:opencensus-api:${openCensusVersion}",
            "io.opencensus:opencensus-impl:${openCensusVersion}",
            'org.projectlombok:lombok:1.18.12'
    )
    buildTools(
            'jarcheck:jarcheck:1.5'
    )
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.3.1',
            'org.mockito:mockito-junit-jupiter:2.23.0'
    )
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    implementation(
            project(':inspectit-ocelot-config'),
            project(':inspectit-ocelot-sdk'),

            
            // spring releated
            "org.springframework.boot:spring-boot:${springVersion}",
            'org.yaml:snakeyaml:1.23',
            'javax.annotation:javax.annotation-api:1.3.2', //Required for @PostConstruct and @PreDestroy to work in Java9+

            // data validation
            'org.apache.tomcat.embed:tomcat-embed-el:9.0.13',
            'org.hibernate.validator:hibernate-validator:6.0.13.Final',

            // logging
            'ch.qos.logback:logback-classic:1.2.3',

            // utils
            "org.apache.commons:commons-lang3:3.+",
            'org.apache.commons:commons-math3:3.6.1',
            'org.apache.httpcomponents:httpclient:4.5.8',
            'commons-io:commons-io:2.6',
            'piccolo:piccolo:1.0.3',
            'com.fasterxml.jackson.core:jackson-databind:2.9.7',

            'org.javassist:javassist:3.24.1-GA',

            // OpenCensus exporters
            "io.opencensus:opencensus-exporter-stats-prometheus:${openCensusVersion}",
            "io.prometheus:simpleclient_httpserver:${prometheusClientVersion}",
            "io.opencensus:opencensus-exporter-trace-zipkin:${openCensusVersion}",
            "io.opencensus:opencensus-exporter-trace-jaeger:${openCensusVersion}",
            "io.opencensus:opencensus-exporter-metrics-ocagent:${openCensusVersion}",

            "io.opencensus:opencensus-exporter-trace-ocagent:${openCensusVersion}",
            // The following dependecy is required for the OC-exporter to work correctly and must be matched against the grpc version
            // See https://github.com/census-instrumentation/opencensus-java/blob/master/exporters/trace/ocagent/README.md
            'io.netty:netty-tcnative-boringssl-static:2.0.20.Final',


            "rocks.inspectit:opencensus-influxdb-exporter:1.2",
            
            // bytecode manipulation
            "net.bytebuddy:byte-buddy:1.11.15"
    )

    testImplementation(
            project(':inspectit-ocelot-bootstrap'),
            "io.opencensus:opencensus-impl:${openCensusVersion}",
            'org.springframework:spring-test:5.1.3.RELEASE',
            'org.apache.httpcomponents:httpclient:4.5.6',
            'org.mockito:mockito-core:2.23.4',
            'org.assertj:assertj-core:3.11.1',
            'org.assertj:assertj-guava:3.2.1',
            'org.awaitility:awaitility:3.1.5',
            "com.github.tomakehurst:wiremock-jre8:2.21.0",
            "io.grpc:grpc-netty-shaded:1.20.0",
            "io.grpc:grpc-stub:1.20.0",
            'org.influxdb:influxdb-java:2.15',
            'io.apisense.embed.influx:embed-influxDB:1.2.1'
    )

    jmh(
            project(':inspectit-ocelot-bootstrap')
    )

}


// use jarCheck to make sure all classes in our dependencies are at maximum in version 1.8
task checkDependencyJavaVersions {
    def excludes = ["byte-buddy"]

    def jarCheckPath = "$buildDir/jarCheck"
    outputs.dir jarCheckPath

    doFirst {
        def jarCheckOutput = new File(jarCheckPath)
        jarCheckOutput.mkdirs()
        configurations.runtimeClasspath.each { file ->
            def name = file.name
            def isExcluded = excludes.stream().anyMatch({ excl ->
                name.contains(excl)
            })
            if (!isExcluded && file.exists()) {
                javaexec {
                    classpath configurations.buildTools
                    main = 'com.mindprod.jarcheck.JarCheck'
                    args = ["$file", "1.0", "1.8"]
                    standardOutput = new File(jarCheckOutput, "$name-check.log").newOutputStream()
                }
            }
        }
    }
}

task generateVersionFile {
    ext.versionFile = new File(buildDir, "ocelot-version.info")
    doLast {
        def currentDate = new Date().toString()
        ext.versionFile.withWriter('UTF-8') { writer ->
            writer << "$version\n$currentDate"
        }
    }
}

jar.dependsOn checkDependencyJavaVersions
jar.dependsOn generateVersionFile

jar {
    archiveName = "${project.name}.jar"

    // include version file
    from generateVersionFile.versionFile

    //include all "implementation" dependencies in fat jar
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/**
 * JMH-Perf tests.
 */
jmhJar {
    doFirst {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }
}
jmh {

    /**
     * Use -PjmhInclude='regular expression' to specify what tests to run with JMH.
     */
    if (project.hasProperty('jmhInclude')) {
        String regex = project.getProperty('jmhInclude')
        println "Filtering for JMH-Tests matching to regex: " + regex
        include = [regex]
    }

    /**
     * Use -jmhProfiler='profiler name and settings' to specify what profiler to run with JMH.
     */
    if (project.hasProperty('jmhProfiler')) {
        String profiler = project.getProperty('jmhProfiler')
        println "Using profiler for JMH tests: " + profiler
        profilers = [profiler]
    }

    /**
     * Use -jmhFlightRecorder=true to add Flight recorder options to the JVM args. You'll need openJDK 11 or OracleJDK 8.
     */
    if (project.hasProperty('jmhFlightRecorder')) {
        def recordingFile = "rec-jmh-${project.name}-${System.currentTimeMillis()}.jfr"
        def frProperties = "-XX:StartFlightRecording=duration=10s,delay=3s,filename=${recordingFile}".toString()
        jvmArgs = ['-XX:+UnlockCommercialFeatures', '-XX:+FlightRecorder', '-XX:+UnlockDiagnosticVMOptions', '-XX:+DebugNonSafepoints', frProperties, '-Djavax.xml.parsers.SAXParserFactory=com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl']
    }

    // output of results and duplicateClassesStrategy
    humanOutputFile = file("$buildDir/jmh/human.txt")
    resultsFile = file("$buildDir/jmh/results.txt")
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE

    // shared settings if not defined on the class level
    warmupIterations = 3
    warmup = '1s'
    iterations = 10
    timeOnIteration = '1s'
    fork = 1
}
