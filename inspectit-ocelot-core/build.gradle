plugins {
    id "me.champeau.gradle.jmh" version "0.5.3"
    id "org.cyclonedx.bom" version "1.5.0"
}

configurations {
    buildTools
}

test {
    useJUnitPlatform()

    jvmArgs '-Xmx512m', '-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=/__w/inspectit-ocelot/inspectit-ocelot/test_heapdump.bin'
    // enable reflection used in relation with OpenTelemetry for JDK 11 and later
    if (JavaVersion.current() >= JavaVersion.VERSION_11) {
        // --add-opens has the following syntax: {A}/{package}={B}
        jvmArgs "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED"
    }
    testLogging {
        exceptionFormat = 'full'
    }
}


sourceCompatibility = 1.8 // Java version compatibility to use when compiling Java source.
targetCompatibility = 1.8 // Java version to generate classes for.


dependencies {
    compileOnly(
            project(':inspectit-ocelot-bootstrap'),
            'org.projectlombok:lombok:1.18.12',

            // OpenTelemetry
            platform("io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}"),
            platform("io.opentelemetry:opentelemetry-bom-alpha:${openTelemetryAlphaVersion}"),
            'io.opentelemetry:opentelemetry-api',
            "io.opentelemetry:opentelemetry-sdk",
            "io.opentelemetry:opentelemetry-sdk-metrics",
            "io.opentelemetry:opentelemetry-semconv",
            // OC-OTel bridge
            "io.opentelemetry:opentelemetry-opencensus-shim",


    )
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation(
            project(':inspectit-ocelot-config'),
            project(':inspectit-ocelot-sdk'),

            // spring related
            "org.springframework.boot:spring-boot:${springVersion}",
            'org.yaml:snakeyaml:1.30',
            'javax.annotation:javax.annotation-api:1.3.2', //Required for @PostConstruct and @PreDestroy to work in Java9+

            // data validation
            'org.apache.tomcat.embed:tomcat-embed-el:9.0.13',
            'org.hibernate.validator:hibernate-validator:6.0.13.Final',

            // logging
            "ch.qos.logback:logback-classic:${logbackVersion}",

            // utils
            "org.apache.commons:commons-lang3:3.+",
            'org.apache.commons:commons-math3:3.6.1',
            'org.apache.httpcomponents:httpclient:4.5.8',
            'commons-io:commons-io:2.6',
            'piccolo:piccolo:1.0.3',
            'com.fasterxml.jackson.core:jackson-databind:2.9.7',

            'org.javassist:javassist:3.24.1-GA',

            // Metrics exporters
            "io.prometheus:simpleclient_httpserver:${prometheusClientVersion}",

            // we still need the OpenCensus SDK for the metric exporters to work, as the shim only includes opencensus-impl-core
            "io.opencensus:opencensus-impl:${openCensusVersion}",

            // OpenTelemetry exporters
            platform("io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}"),
            "io.opentelemetry:opentelemetry-exporter-logging",
            "io.opentelemetry:opentelemetry-exporter-jaeger",
            "io.opentelemetry:opentelemetry-exporter-jaeger-thrift",
            "io.opentelemetry:opentelemetry-exporter-zipkin",
            "io.opentelemetry:opentelemetry-exporter-otlp",
            "io.opentelemetry:opentelemetry-exporter-otlp-http-trace",
            "io.opentelemetry:opentelemetry-exporter-otlp-metrics",
            "io.opentelemetry:opentelemetry-exporter-otlp-http-metrics",

            platform("io.opentelemetry:opentelemetry-bom-alpha:${openTelemetryAlphaVersion}"),
            "io.opentelemetry:opentelemetry-exporter-prometheus",

            // The following dependency is required for the OC-exporter to work correctly and must be matched against the grpc version
            // See https://github.com/census-instrumentation/opencensus-java/blob/master/exporters/trace/ocagent/README.md
            "io.netty:netty-tcnative-boringssl-static:${tcnativeVersion}",

            "rocks.inspectit:opencensus-influxdb-exporter:1.2",

            // bytecode manipulation
            "net.bytebuddy:byte-buddy:1.11.15"
    )

    testImplementation(
            project(':inspectit-ocelot-bootstrap'),
            platform("io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}"),
            platform("io.opentelemetry:opentelemetry-bom-alpha:${openTelemetryAlphaVersion}"),
            "io.opentelemetry:opentelemetry-sdk",
            "io.opentelemetry:opentelemetry-sdk-metrics",
            "io.opentelemetry:opentelemetry-opencensus-shim",
            "io.opentelemetry:opentelemetry-semconv",
            "io.opentelemetry:opentelemetry-sdk-testing",
            "io.opentelemetry:opentelemetry-proto:1.7.1-alpha",

            // matching the spring-core version used in the currently used version of spring boot version
            'org.springframework:spring-test:5.3.14',

            'org.junit.jupiter:junit-jupiter-api:5.8.2',
            'org.mockito:mockito-junit-jupiter:4.2.0',

            // to make use of SpyBean
            "org.springframework.boot:spring-boot-test:2.1.4.RELEASE",

            'org.apache.httpcomponents:httpclient:4.5.6',
            "org.mockito:mockito-core:${mockitoVersion}",
            'org.assertj:assertj-core:3.11.1',
            'org.assertj:assertj-guava:3.2.1',
            'org.awaitility:awaitility:3.1.5',
            "com.github.tomakehurst:wiremock-jre8-standalone:2.32.0",
            "io.grpc:grpc-netty-shaded:${grpcVersion}",
            "io.grpc:grpc-stub:${grpcVersion}",
            'org.influxdb:influxdb-java:2.15',
            'io.apisense.embed.influx:embed-influxDB:1.2.1',

            // for docker test containers
            'org.testcontainers:testcontainers:1.15.2',
            'org.testcontainers:junit-jupiter:1.15.2',

            // ServerExtension
            'com.linecorp.armeria:armeria-junit5:1.14.1',
            'com.linecorp.armeria:armeria-grpc-protocol:1.14.1',

            'com.google.protobuf:protobuf-java-util:3.15.7',

            // LogCapturer
            'io.github.netmikey.logunit:logunit-core:1.1.3',
            // jul-slf4j bridge needed to redirect OTEL logs using java.util.logging to logback
            "org.slf4j:jul-to-slf4j:1.7.5",
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.8.2',
            // LogCapturer
            'io.github.netmikey.logunit:logunit-logback:1.1.3',
    )

    jmh(
            project(':inspectit-ocelot-bootstrap')
    )

}

apply plugin: 'java'
task compileJarCheck(type: JavaCompile){
    source = sourceSets.main.java.srcDirs
    include 'com/mindprod/jarcheck/JarCheck.java'
    classpath = sourceSets.main.compileClasspath
    destinationDir =  new File("${buildDir}/classes/java/main")
}

// use jarCheck to make sure all classes in our dependencies are at maximum in version 1.8
task checkDependencyJavaVersions {

    def excludes = ["byte-buddy",
                    // exclude OpenTelemetry as they guarantee JDK 8 support
                    "opentelemetry",
                    // exclude jackson which is being used by OTel
                    "jackson",
                    // exclude kotlin-stdlib which is being used by opentelemetry-exporter-jaeger-thrift
                    "kotlin-stdlib"]

    def jarCheckPath = "$buildDir/jarCheck"
    outputs.dir jarCheckPath

    doFirst {
        def jarCheckOutput = new File(jarCheckPath)
        jarCheckOutput.mkdirs()
        configurations.runtimeClasspath.each { file ->
            def name = file.name
            def isExcluded = excludes.stream().anyMatch({ excl ->
                name.contains(excl)
            })
            if (!isExcluded && file.exists()) {
                javaexec {
                    mainClass = 'com.mindprod.jarcheck.JarCheck'
                    classpath = sourceSets.main.runtimeClasspath
                    args = ["$file", "1.0", "1.8"]
                    standardOutput = new File(jarCheckOutput, "$name-check.log").newOutputStream()
                }
            }
        }
    }
}
checkDependencyJavaVersions.dependsOn compileJarCheck

task generateVersionFile {
    ext.versionFile = new File(buildDir, "ocelot-version.info")
    doLast {
        def currentDate = new Date().toString()
        ext.versionFile.withWriter('UTF-8') { writer ->
            writer << "$version\n$openTelemetryVersion\n$currentDate"
        }
    }
}

cyclonedxBom {
    includeConfigs += ["runtimeClasspath"]
}

jar.dependsOn checkDependencyJavaVersions
jar.dependsOn generateVersionFile

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    archiveName = "${project.name}.jar"

    // include version file
    from generateVersionFile.versionFile

    //include all "implementation" dependencies in fat jar
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/**
 * JMH-Perf tests.
 */
jmhJar {
    doFirst {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }
}
jmh {

    /**
     * Use -PjmhInclude='regular expression' to specify what tests to run with JMH.
     */
    if (project.hasProperty('jmhInclude')) {
        String regex = project.getProperty('jmhInclude')
        println "Filtering for JMH-Tests matching to regex: " + regex
        include = [regex]
    }

    /**
     * Use -jmhProfiler='profiler name and settings' to specify what profiler to run with JMH.
     */
    if (project.hasProperty('jmhProfiler')) {
        String profiler = project.getProperty('jmhProfiler')
        println "Using profiler for JMH tests: " + profiler
        profilers = [profiler]
    }

    /**
     * Use -jmhFlightRecorder=true to add Flight recorder options to the JVM args. You'll need openJDK 11 or OracleJDK 8.
     */
    if (project.hasProperty('jmhFlightRecorder')) {
        def recordingFile = "rec-jmh-${project.name}-${System.currentTimeMillis()}.jfr"
        def frProperties = "-XX:StartFlightRecording=duration=10s,delay=3s,filename=${recordingFile}".toString()
        jvmArgs = ['-XX:+UnlockCommercialFeatures', '-XX:+FlightRecorder', '-XX:+UnlockDiagnosticVMOptions', '-XX:+DebugNonSafepoints', frProperties, '-Djavax.xml.parsers.SAXParserFactory=com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl']
    }

    // output of results and duplicateClassesStrategy
    humanOutputFile = file("$buildDir/jmh/human.txt")
    resultsFile = file("$buildDir/jmh/results.txt")
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE

    // shared settings if not defined on the class level
    warmupIterations = 3
    warmup = '1s'
    iterations = 10
    timeOnIteration = '1s'
    fork = 1
}
