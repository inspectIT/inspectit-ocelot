name: Build and Release

on:
  push:
    tags:
      - "[0-9]*.[0-9]*.[0-9]**"

jobs:
  build_and_release:
    name: 'Build and Release'
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 17  # Spring 3 needs at least java 17
          distribution: temurin
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build artifacts
        run: |
          ./gradlew assemble bootJarWithFrontend :inspectit-ocelot-core:cyclonedxBom :inspectit-ocelot-configurationserver:cyclonedxBom :inspectit-ocelot-configschemagenerator:generateConfigSchema -PbuildVersion=${{ github.ref_name }}
          mkdir artifacts
          cp ./inspectit-ocelot-agent/build/inspectit-ocelot-agent-${{ github.ref_name }}.jar ./artifacts
          cp ./components/inspectit-ocelot-configurationserver/build/libs/inspectit-ocelot-configurationserver-${{ github.ref_name }}.jar ./artifacts
          cp ./components/inspectit-ocelot-configschemagenerator/build/inspectit-ocelot-configuration-schema-${{github.ref_name}}.json ./artifacts
          mkdir boms
          cp ./inspectit-ocelot-core/build/reports/bom.json ./boms/inspectit-ocelot-agent-bom.json
          cp ./inspectit-ocelot-core/build/reports/bom.xml ./boms/inspectit-ocelot-agent-bom.xml
          cp ./components/inspectit-ocelot-configurationserver/build/reports/bom.json ./boms/inspectit-ocelot-configurationserver-bom.json
          cp ./components/inspectit-ocelot-configurationserver/build/reports/bom.xml ./boms/inspectit-ocelot-configurationserver-bom.xml
          zip -r ./artifacts/software-bill-of-materials.zip ./boms
      - name: Prepare docker artifacts
        run: ./gradlew :inspectit-ocelot-agent:copyAgentJar :inspectit-ocelot-configurationserver:copyServerJar
      - name: Calculate checksums of release artifacts
        working-directory: ./artifacts
        run: for f in *; do sha256sum "$f" >> inspectit-ocelot-sha256-checksums.txt; done
      - name: "Get previous tag"
        id: previoustag
        # this gets the tag of the previous release based on the tags in the repo
        run: echo "tag=$(git ls-remote --tags | cut --delimiter='/' --fields=3  | tail --lines=2 | head  -n -1)" >> $GITHUB_OUTPUT
      - name: "Build Changelog"
        id: build_changelog
        uses: danipaniii/action-github-changelog-generator@v1.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sinceTag: ${{ steps.previoustag.outputs.tag }}
          dateFormat:
          maxIssues: 500
          unreleased: false
          author: false
          headerLabel: "## Changelog"
          stripGeneratorNotice: true
      - name: Create Release
        uses: softprops/action-gh-release@v0.1.14
        with:
          tag_name: ${{ github.event.inputs.boomerang-version }}
          files: artifacts/*
          generate_release_notes: false
          token: ${{ github.token }}
          name: Version ${{ github.ref_name }}
          body: |
            "You can also find the corresponding documentation online under the following link: [inspectIT Ocelot Documentation](http://docs.inspectit.rocks)"
            ${{ steps.build_changelog.outputs.changelog }}

  # Build the docker images for multiple platforms and prepare for publishing
  # Check out: https://github.com/docker/build-push-action
  # And: https://docs.docker.com/build/ci/github-actions/multi-platform/
  build_docker_images:
    name: "Build Docker Images"
    runs-on: ubuntu-latest
    needs: build_and_release
    environment: release
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v6
          - linux/arm/v7
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push agent
        id: build-agent
        uses: docker/build-push-action@v6
        with:
          context: inspectit-ocelot-agent/docker
          file: Dockerfile
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=inspectit/inspectit-ocelot-agent,push-by-digest=true,name-canonical=true,push=true
      - name: Export digest agent
        run: |
          mkdir -p ${{ runner.temp }}/digests-agent
          digest="${{ steps.build-agent.outputs.digest }}"
          touch "${{ runner.temp }}/digests-agent/${digest#sha256:}"
      - name: Upload digest agent
        uses: actions/upload-artifact@v4
        with:
          name: digests-agent-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests-agent/*
          if-no-files-found: error
          retention-days: 1

      - name: Build and push configurationserver
        id: build-configurationserver
        uses: docker/build-push-action@v6
        with:
          context: components/inspectit-ocelot-configurationserver/docker
          file: Dockerfile
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=inspectit/inspectit-ocelot-configurationserver,push-by-digest=true,name-canonical=true,push=true
      - name: Export digest configurationserver
        run: |
          mkdir -p ${{ runner.temp }}/digests-configurationserver
          digest="${{ steps.build-configurationserver.outputs.digest }}"
          touch "${{ runner.temp }}/digests-configurationserver/${digest#sha256:}"

      - name: Upload digest configurationserver
        uses: actions/upload-artifact@v4
        with:
          name: digests-configurationserver-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests-configurationserver/*
          if-no-files-found: error
          retention-days: 1

  # Merge the prepared docker images and publish to DockerHub
  merge_and_publish_docker_images:
    name: "Merge and Publish Docker Images"
    runs-on: ubuntu-latest
    environment: release
    needs: build_docker_images
    steps:
      - name: Download digests agent
        uses: actions/download-artifact@v4
        with:
          name: digests-agent-*
          path: ${{ runner.temp }}/digests-agent
          pattern: digests-agent-*
          merge-multiple: true
      - name: Download digests for configurationserver
        uses: actions/download-artifact@v4
        with:
          name: digests-configurationserver-*
          path: ${{ runner.temp }}/digests-configurationserver
          pattern: digests-configurationserver-*
          merge-multiple: true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta agent
        id: meta-agent
        uses: docker/metadata-action@v5
        with:
          images: inspectit/inspectit-ocelot-agent
          tags: |
            type=ref,event=tag
            type=raw,value=latest
      - name: Docker meta configurationserver
        id: meta-configurationserver
        uses: docker/metadata-action@v5
        with:
          images: inspectit/inspectit-ocelot-configurationserver
          tags: |
            type=ref,event=tag
            type=raw,value=latest

      - name: Push agent
        working-directory: ${{ runner.temp }}/digests-agent
        run: |
          docker buildx imagetools create ${{ steps.meta-agent.outputs.tags }} \
          $(printf 'inspectit/inspectit-ocelot-agent@sha256:%s ' *)
      - name: Inspect manifest agent
        run: |
          docker buildx imagetools inspect inspectit/inspectit-ocelot-agent:${{ github.ref_name }}

      - name: Push configurationserver
        working-directory: ${{ runner.temp }}/digests-configurationserver
        run: |
          docker buildx imagetools create ${{ steps.meta-configurationserver.outputs.tags }} \
            $(printf 'inspectit/inspectit-ocelot-configurationserver@sha256:%s ' *)
      - name: Inspect manifest configurationserver
        run: |
          docker buildx imagetools inspect inspectit/inspectit-ocelot-configurationserver:${{ github.ref_name }}

  build_documentation:
    name: "Build and Publish Release Documentation"
    runs-on: ubuntu-latest
    environment: release
    defaults:
      run:
        working-directory: inspectit-ocelot-documentation/website
    needs: merge_and_publish_docker_images
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Uses Personal Access Token of GitHub user NTTechnicalUser.
          # This stores git credentials for all subsequent steps.
          # Currently, we only need it for step _Create new Documentation
          # Version_.
          # Otherwise, that step is not allowed to push to master, as it is a
          # protected branch.
          token: ${{ secrets.RELEASE_USER_TOKEN }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: 'inspectit-ocelot-documentation/website/yarn.lock'
      - name: Replace Variables in Docs
        working-directory: ./inspectit-ocelot-documentation/docs
        run: |
          find . -type f -print0 | xargs -0 sed -i 's/{inspectit-ocelot-version}/'"${{ github.ref_name }}"'/g'
          OPENTELEMETRY_VERSION=$(grep -oP 'ioOpentelemetry\s*=\s*"\K[^"]+' ../../gradle/libs.versions.toml)
          find . -type f -print0 | xargs -0 sed -i 's/{opentelemetry-version}/'"${OPENTELEMETRY_VERSION}"'/g'
      - name: Create new Documentation Version
        run: |
          npm install
          npm run version ${{ github.ref_name }}
          git add versions.json versioned_docs versioned_sidebars
          git config --global user.name 'NTTechnicalUser'
          git config --global user.email 'NTTechnicalUser@users.noreply.github.com'
          git commit -m "Publish documentation for release ${{ github.ref_name }}"
          git push -f origin HEAD:master
      - name: Install Build Dependencies
        run: yarn install --frozen-lockfile
      - name: Build Website
        run: yarn build
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./inspectit-ocelot-documentation/website/build/inspectit-ocelot
          user_name: NTTechnicalUser
          user_email: NTTechnicalUser@users.noreply.github.com
          commit_message: Publish documentation for release ${{ github.ref_name }}
