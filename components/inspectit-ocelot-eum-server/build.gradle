plugins {
    id 'org.springframework.boot' version "${springboot_version}"
    id 'com.palantir.docker' version "0.21.0"
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

group = 'rocks.inspectit.ocelot'
sourceCompatibility = '1.8'

version = "$buildVersion"

task downloadBoomerangjs() {
    logger.info('Downloading Boomerangjs version {}.', boomerangVersion)
    ext.dest = new File(buildDir, "boomerang-source-${boomerangVersion}.tgz")
    outputs.files(ext.dest)
    doLast {
        def f = ext.dest
        new URL("https://registry.npmjs.org/boomerangjs/-/boomerangjs-${boomerangVersion}.tgz")
                .withInputStream { i -> f.withOutputStream { it << i } }
    }
}

task deleteBoomerangjs(type: Delete) {
    delete new File(project.buildDir, "boomerangjs-${boomerangVersion}")
}

task downloadAndExtractBoomerang(dependsOn: [deleteBoomerangjs, downloadBoomerangjs], type: Copy) {
    from tarTree(downloadBoomerangjs.dest)
    into new File(project.buildDir, "boomerangjs-${boomerangVersion}")
    filter { line -> line.replaceAll('%boomerang_version%', "${boomerangVersion}") }
}

task generateVersionFile {
    ext.versionFile = new File(project.buildDir, "eum-version.info")
    doLast {
        def currentDate = new Date().toString()
        ext.versionFile.withWriter('UTF-8') { writer ->
            writer << "$version\n$currentDate\n$boomerangVersion"
        }
    }
}

task downloadOpenTelemetryPlugin() {
    ext.dest = new File(buildDir, "boomerang-opentelemetry.js")
    outputs.files(ext.dest)
    doLast {
        def f = ext.dest
        new URL("https://github.com/NovatecConsulting/boomerang-opentelemetry-plugin/releases/download/$openTelemetryVersion/boomerang-opentelemetry.js")
                .withInputStream { i -> f.withOutputStream { it << i } }
    }

}

bootJar {
    dependsOn generateVersionFile
    dependsOn downloadAndExtractBoomerang
    dependsOn downloadOpenTelemetryPlugin

    archivesBaseName = 'inspectit-ocelot-eum-server'
    version = "${buildVersion}"

    manifest {
        attributes 'Start-Class': 'rocks.inspectit.oce.eum.server.EUMServerApplication'
    }

    // include version file
    from generateVersionFile.versionFile

    // include boomerang
    from("$buildDir/boomerangjs-${boomerangVersion}/package") {
        include "plugins/*.js"
        include "boomerang.js"
        into "static/boomerang"
    }

    //include boomerang opentelemetry
    from("$buildDir") {
        include "boomerang-opentelemetry.js"
        into "static/boomerang"
    }
}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

dependencies {
    implementation(
            project(':inspectit-ocelot-config'),

            "org.springframework.boot:spring-boot-starter-web",
            'org.springframework.boot:spring-boot-starter-actuator',
            "org.springframework.boot:spring-boot-starter-validation",
            "org.springframework.security:spring-security-web:5.1.5.RELEASE",

            // pin Prometheus client to 0.6.0 to prevent auto prefixing counter metrics with "_total"
            // see: https://github.com/prometheus/client_java/issues/640, https://github.com/prometheus/client_java/pull/653
            "io.prometheus:simpleclient:${prometheusClientVersion}",
            "io.prometheus:simpleclient_common:${prometheusClientVersion}",
            "io.prometheus:simpleclient_httpserver:${prometheusClientVersion}",

            "io.opencensus:opencensus-api:${openCensusVersion}",
            "io.opencensus:opencensus-impl:${openCensusVersion}",
            "io.opencensus:opencensus-exporter-stats-prometheus:${openCensusVersion}",

            "io.grpc:grpc-netty-shaded:1.36.1",
            "io.grpc:grpc-protobuf:1.36.1",
            "io.grpc:grpc-stub:1.36.1",
            "io.opentelemetry:opentelemetry-proto:1.1.0-alpha",
            "io.opentelemetry:opentelemetry-exporter-jaeger:1.1.0",
            "io.opentelemetry:opentelemetry-sdk:1.1.0",

            "com.google.protobuf:protobuf-java:3.15.7",
            "com.google.protobuf:protobuf-java-util:3.15.7",

            'com.maxmind.geoip2:geoip2:2.12.0',
            'commons-net:commons-net:3.3',
            "org.apache.commons:commons-lang3:3.+",
            'org.apache.commons:commons-math3:3.6.1',
            "org.influxdb:influxdb-java:2.15",
            "rocks.inspectit:opencensus-influxdb-exporter:1.2",
    )

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation(
            project(':inspectit-ocelot-config'),
            "org.springframework.boot:spring-boot-starter-test",
            "io.opencensus:opencensus-impl:${openCensusVersion}",
            'org.apache.httpcomponents:httpclient:4.5.6',
            'commons-io:commons-io:2.6',
            "org.mockito:mockito-core:${mockitoVersion}",
            'org.junit.jupiter:junit-jupiter-api:5.3.1',
            'org.awaitility:awaitility:3.1.5',
            'org.mockito:mockito-junit-jupiter:2.23.0',
            'org.testcontainers:testcontainers:1.15.2',
            'org.testcontainers:junit-jupiter:1.15.2'
    )

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
}

task copyServerJar(type: Copy) {
    dependsOn bootJar
    from("${buildDir}/libs/inspectit-ocelot-eum-server-${version}.jar")
    into("${buildDir}/docker-jar")
    rename("inspectit-ocelot-eum-server-${version}\\.jar",
            'inspectit-ocelot-eum-server.jar')
}

docker {
    name "inspectit/inspectit-ocelot-eum-server"
    tags "${version}"
    dockerfile file('docker/Dockerfile')
    files 'docker/entrypoint.sh', "$buildDir/docker-jar/inspectit-ocelot-eum-server.jar"
}
docker.dependsOn copyServerJar