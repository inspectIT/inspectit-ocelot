// The test breaks from 5.12.* but since the tests here are not that important
// we don't necessarily have to stay up-to-date with junit versions
var jupiterVersion = "5.11.4"

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:${jupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"

    implementation(
            project(':inspectit-ocelot-config'),
            libs.ioOpentelemetryOpentelemetryApi,

            // We chose this generator, because it has a great feature-set and is actively maintained
            configServerLibs.comGithubVictoolsJsonschemaGenerator,
            configServerLibs.comGithubVictoolsJsonschemaModuleJackson,
            configServerLibs.comGithubVictoolsJsonschemaModuleJavaxValidation,
    )

    compileOnly libs.orgProjectlombokLombok
    annotationProcessor libs.orgProjectlombokLombok
}

task generateConfigSchema(type: JavaExec) {
    def outputPath = "$buildDir/inspectit-ocelot-configuration-schema-${version}.json"

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("rocks.inspectit.ocelot.configschemagenerator.InspectitSchemaGenerator")
    args outputPath
}

// build fatJar with dependencies included (needed for dependency checks)
jar {
    manifest {
        attributes('Main-Class': 'rocks.inspectit.ocelot.configschemagenerator.InspectitSchemaGenerator')
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}
