dependencies {
    testImplementation(
            configServerLibs.orgJunitJupiterJunitJupiter
    )

    implementation(
            project(':inspectit-ocelot-config'),
            libs.ioOpentelemetryOpentelemetryApi,

            // We chose this generator, because it has a great feature-set and is actively maintained
            configServerLibs.comGithubVictoolsJsonschemaGenerator,
            configServerLibs.comGithubVictoolsJsonschemaModuleJackson,
            configServerLibs.comGithubVictoolsJsonschemaModuleJavaxValidation,
    )

    compileOnly libs.orgProjectlombokLombok
    annotationProcessor libs.orgProjectlombokLombok
}

task generateConfigSchema(type: JavaExec) {
    def outputPath = "$buildDir/inspectit-ocelot-configuration-schema-${version}.json"

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("inspectit.ocelot.configschemagenerator.InspectitSchemaGenerator")
    args outputPath
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}