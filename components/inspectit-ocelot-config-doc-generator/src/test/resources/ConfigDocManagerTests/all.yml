inspectit:
  instrumentation:
    actions:
      # Prints two given Objects to stdout
      a_debug_println_2:
        imports:
          - java.util
        input:
          a: Object
          b: |
            Object
        value-body: |
          System.out.println(a + \"\" + b);
          return a + \"\" b;";
      # Prints a given Object to stdout
      a_debug_println:
        _doc:
          _description: 'Prints a given Object to stdout.'
          _input-desc:
            value: Object to be printed
          _return-desc: Void
        input:
          value: Object
        is-void: true
        value: System.out.println(value);

    scopes:
      s_jdbc_statement_execute:
        _doc:
          _description: 'Scope for executed JDBC statements.'
        superclass:
          name: java.net.HttpURLConnection
        interfaces:
          - name: java.sql.Statement
        methods:
          - name: execute
          - name: executeQuery
          - name: executeUpdate
        advanced:
          instrument-only-inherited-methods: true
      
    rules:
      r_tracing_global_attributes:
        exit:
          method_name:
            action: a_get_name

      r_capture_method_duration_conditional:
        _doc:
          _description: |-
            Conditionally captures the execution time of the current method into method_duration
            The capturing will only happen it capture_time_condition is defined as true.
            For example, http instrumentation define capture_time_condition based on http_is_entry
            The condition is there to prevent unnecessary invocations of System.nanoTime(), which can be expensive
        include:
          r_tracing_global_attributes: true
          r_capture_method_entry_timestamp_conditional: true
          r_capture_ddd: false
        scopes:
          s_httpurlconnection_connect: true
          s_httpurlconnection_getOutputStream: true
        exit:
          method_duration:
            only-if-true: capture_time_condition
            action: a_timing_elapsedMillis
            data-input:
              since_nanos: method_entry_time
            constant-input:
              value: sql
        tracing:
          start-span: true
          start-span-conditions:
            only-if-true: jdbc_is_entry
          attributes:
            db.type: db_type_sql
            db.url: jdbc_url
          error-status: _thrown
        metrics:
          '[service/in/responsetime]':
            value: servicegraph_duration
            data-tags:
              origin_service: servicegraph_origin_service_local
              origin_external: servicegraph_origin_external
            constant-tags:
              protocol: servicegraph_protocol
              error: servicegraph_is_error
  metrics:
    disk:
      enabled:
        # if true, the free disk space will be measured and the view "disk/free" is registered
        free: true
    definitions:
      '[disk/free]':
        enabled: ${inspectit.metrics.disk.enabled.free}
        type: LONG
        unit: bytes
        description: free disk space