inspectit:
  instrumentation:
    actions:

      'a_debug_println':
        _doc:
          _description: Prints a given Object to stdout
        input:
          'value': 'Object'
          'test': 'String'
        is-void: true
        value: 'System.out.println(value);'

      'a_debug_println_2':
        _doc:
          _description: Prints two given Objects to stdout
        imports:
          - 'java.util'
        input:
          'a': 'Object'
          'b': |
            asdf
            asdf
            
            test
        is-void: true
        value-body: |
          System.out.println(a + "" + b);
          /*asd
          asdf
          
          
          */
          System.out.println(a + "" + b);

    scopes:

      's_jdbc_statement_execute':
        _doc:
          _description: Scope
        superclass:
          name: 'java.net.HttpURLConnection'
        interfaces:
          - name: 'java.sql.Statement'
        methods:
          - name: 'execute'
          - name: 'executeQuery'
          - name: 'executeUpdate'
        advanced:
          instrument-only-inherited-methods: true

    rules:
      _doc:
        _description: |
          Conditionally captures the execution time of the current method into method_duration
          The capturing will only happen it capture_time_condition is defined as true.
          For example, http instrumentation define capture_time_condition based on http_is_entry
          The condition is there to prevent unnecessary invocations of System.nanoTime(), which can be expensive
      'r_capture_method_duration_conditional':
        include:
          'r_tracing_global_attributes': true
          'r_capture_method_entry_timestamp_conditional': true
        scopes:
          's_httpurlconnection_connect': true
          's_httpurlconnection_getOutputStream': true
        exit:
          'method_duration':
            only-if-true: 'capture_time_condition'
            action: 'a_timing_elapsedMillis'
            data-input:
              'since_nanos': 'method_entry_time'
            constant-input:
              'value': 'sql'
        tracing:
          start-span: true
          start-span-conditions:
            only-if-true: 'jdbc_is_entry'
          attributes:
            'db.type': 'db_type_sql'
            'db.url': 'jdbc_url'
          error-status: _thrown
        metrics:
          '[service/in/responsetime]':
            value: 'servicegraph_duration'
            data-tags:
              'origin_service': 'servicegraph_origin_service_local'
              'origin_external': 'servicegraph_origin_external'
              'protocol': 'servicegraph_protocol'
              'error': 'servicegraph_is_error'
  metrics:
    definitions:
      '[disk/free]':
        enabled: '${inspectit.metrics.disk.enabled.free}'
        type: LONG
        unit: bytes
        description: "free disk space"