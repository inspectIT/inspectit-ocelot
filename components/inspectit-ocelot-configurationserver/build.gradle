import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
    id 'maven-publish'
    alias(configServerLibs.plugins.orgSpringframeworkBoot)
    alias(libs.plugins.orgCyclonedxBom)
    alias(configServerLibs.plugins.ioSpringDependencyManagement)
}

apply plugin: 'idea'
apply plugin: 'java'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

def serverMainClass = 'rocks.inspectit.ocelot.ConfigurationServer'

bootJar {
    archiveBaseName = 'inspectit-ocelot-configurationserver-noui'
    archiveVersion = "${buildVersion}"

    mainClass = "${serverMainClass}"
}

/**
 * Builds the configuration server and the web frontend.
 */
tasks.register('bootJarWithFrontend', BootJar) {
    group = "build"
    archiveBaseName = 'inspectit-ocelot-configurationserver'
    archiveVersion = "${buildVersion}"

    from("${project.projectDir}/../inspectit-ocelot-configurationserver-ui/out") {
        into('static/ui')
    }

    getTargetJavaVersion().set(JavaVersion.current())
    mainClass = "${serverMainClass}"

    with bootJar
}
bootJarWithFrontend.dependsOn ':inspectit-ocelot-configurationserver-ui:buildFrontend'

cyclonedxBom {
    includeConfigs = ["runtimeClasspath"]
    // Specifies the version of the CycloneDX specification to use.
    schemaVersion = "1.4"
    // Specifies the type of project being built. Defaults to 'library'
    projectType = "application"
    outputName = "bom"
    outputFormat = "all"
}

repositories {
    mavenCentral()
}

group = 'rocks.inspectit.ocelot'

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}


dependencies {
    compileOnly libs.orgProjectlombokLombok
    annotationProcessor libs.orgProjectlombokLombok
}

dependencies {
    implementation(
            project(':inspectit-ocelot-config'),
            // this is necessary as inspectit-ocelot-config needs it, but can
            // only use a compile-only (see details over there)
            libs.ioOpentelemetryOpentelemetrySdkMetrics,
            project(':inspectit-ocelot-configdocsgenerator'),
            configServerLibs.orgSpringframeworkBootSpringBootStarterWeb,
            configServerLibs.orgSpringframeworkBootSpringBootStarterDataJpa,
            configServerLibs.orgSpringframeworkBootSpringBootStartervalidation,
            configServerLibs.orgSpringframeworkSecuritySpringSecurityWeb,
            configServerLibs.orgSpringframeworksecuritySpringSecurityConfig,
            configServerLibs.orgSpringframeworkLdapSpringLdapCore,
            configServerLibs.orgSpringframeworkSecuritySpringSecurityLdap,
            configServerLibs.orgSpringframeworkBootSpringBootStarterActuator,

            configServerLibs.chQosLogbackLogbackClassic,
            configServerLibs.chQosLogbackLogbackCore,

            configServerLibs.orgYamlSnakeyaml,

            libs.orgApacheHttpcomponentsClient5Httpclient5, // Required for PATCH-Requests to Kapacitor
            libs.orgApacheHttpcomponentsCore5Httpcore5,

            configServerLibs.orgXerialSqliteJdbc,
            configServerLibs.orgHibernateOrmHibernateCommunityDialects,
            configServerLibs.bundles.jsonwebtoken,
            configServerLibs.commonsIo,
            configServerLibs.orgApacheCommonsCommonsLang3,
            configServerLibs.orgFlywaydbFlywayCore,
            configServerLibs.bundles.jgit,
            configServerLibs.comGoogleCodeGson,
            configServerLibs.comGoogleGuava,

            // swagger
            configServerLibs.orgSpringdocSpringdocOpenapiStarterWebmvcUi
    )
    testImplementation(
            configServerLibs.orgSpringframeworkBootSpringBootStarterTest,
            configServerLibs.orgSpringframeworkSecuritySpringSecurityTest,
            configServerLibs.comH2databaseH2,
            configServerLibs.orgAwaitility
    )
}

// Copy the jar into the docker folder without version suffix
tasks.register('copyServerJar', Copy) {
    dependsOn bootJarWithFrontend
    from("$buildDir/libs/inspectit-ocelot-configurationserver-${version}.jar")
    into("$projectDir/docker")
    rename("inspectit-ocelot-configurationserver-${version}\\.jar",
            'inspectit-ocelot-configurationserver.jar')
}
