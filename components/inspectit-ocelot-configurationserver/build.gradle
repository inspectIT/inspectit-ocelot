plugins {
    id("com.github.node-gradle.node") version "2.2.1"
    id "com.moowork.node" version "1.3.1"
    id 'com.palantir.docker' version "0.34.0"
    id 'org.springframework.boot' version "${springBootVersion}"
    id "org.cyclonedx.bom" version "1.7.2"
    // Add the plugin in the existing plugins block
    id "org.owasp.dependencycheck" version "7.4.1"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

node {
    // Version of node to use.
    version = '12.22.0'

    // Version of npm to use.
    npmVersion = '6.13.4'

    // Version of Yarn to use.
    yarnVersion = '1.22.0'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory for Yarn
    yarnWorkDir = file("${project.buildDir}/yarn")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/../inspectit-ocelot-configurationserver-ui")
}

/**
 * Task for installing the frontend dependencies.
 */
task installFrontend(type: YarnTask) {
    args = ['install']
}

/**
 * Task for building the frontend and copying it to the configuration-server project.
 */
task buildFrontend(type: YarnTask) {
    args = ['export']
}
buildFrontend.dependsOn installFrontend


def serverMainClass = 'rocks.inspectit.ocelot.ConfigurationServer'

bootJar {
    archivesBaseName = 'inspectit-ocelot-configurationserver-noui'
    version = "${buildVersion}"

    mainClass = "${serverMainClass}"
}

/**
 * Builds the configuration server and the web frontend.
 */
task bootJarWithFrontend(type: org.springframework.boot.gradle.tasks.bundling.BootJar) {
    group = "build"
    archivesBaseName = 'inspectit-ocelot-configurationserver'
    version = "${buildVersion}"

    from("${project.projectDir}/../inspectit-ocelot-configurationserver-ui/out") {
        into('static/ui')
    }

    mainClass = "${serverMainClass}"

    with bootJar
}
bootJarWithFrontend.dependsOn buildFrontend

cyclonedxBom {
    includeConfigs = ["runtimeClasspath"]
    // Specifies the version of the CycloneDX specification to use.
    schemaVersion = "1.4"
    // Specifies the type of project being built. Defaults to 'library'
    projectType = "application"
}

repositories {
    mavenCentral()
}
//to guarantee that the Configuration Server is compatible with Java 8 runtime environments
sourceCompatibility = 1.8 // Java version compatibility to use when compiling Java source.
targetCompatibility = 1.8 // Java version to generate classes for.
test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

dependencies {
    implementation(
            project(':inspectit-ocelot-config'),
            project(':inspectit-ocelot-configdocsgenerator'),

            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.springframework.boot:spring-boot-starter-validation",
            "org.springframework.security:spring-security-web",
            "org.springframework.security:spring-security-config",
            "org.springframework.ldap:spring-ldap-core",
            "org.springframework.security:spring-security-ldap",
            'org.springframework.boot:spring-boot-starter-actuator',

            // spring related
            "org.yaml:snakeyaml:${snakeYamlVersion}",

            'org.apache.httpcomponents:httpclient', //Required for PATCH-Requests

            'org.xerial:sqlite-jdbc:3.40.0.0',
            "com.github.gwenn:sqlite-dialect:0.1.0",
            "io.jsonwebtoken:jjwt-api:${jsonWebTokenVersion}",
            "io.jsonwebtoken:jjwt-impl:${jsonWebTokenVersion}",
            "io.jsonwebtoken:jjwt-jackson:${jsonWebTokenVersion}",
            // If a version from a dependency is not specified explicitly, it is managed via plugin
            // 'io.spring.dependency-management' and the version matches the ones from Spring Boot Bom.
            "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml",
            "com.fasterxml.jackson.core:jackson-databind",
            "commons-io:commons-io:${commonsIoVersion}",
            "org.apache.commons:commons-lang3",
            "org.flywaydb:flyway-core",
            "org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r",
            "com.google.code.gson:gson",

            // swagger
            "org.springdoc:springdoc-openapi-ui:1.6.13",

            "io.opentelemetry:opentelemetry-sdk:${openTelemetryVersion}",
            "io.opentelemetry:opentelemetry-opencensus-shim:${openTelemetryAlphaVersion}"
    )
    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.security:spring-security-test',
            'org.junit.jupiter:junit-jupiter-api',
            'org.mockito:mockito-junit-jupiter',
            // That version is important. If we stick to the version provided by Spring Boot Bom
            // database initialization scripts will fail.
            'com.h2database:h2:1.4.194',
            'org.awaitility:awaitility'
    )
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

task copyServerJar(type: Copy) {
    dependsOn bootJarWithFrontend
    from("${buildDir}/libs/inspectit-ocelot-configurationserver-${version}.jar")
    into("${buildDir}/docker-jar")
    rename("inspectit-ocelot-configurationserver-${version}\\.jar",
            'inspectit-ocelot-configurationserver.jar')
}

docker {
    name "inspectit/inspectit-ocelot-configurationserver"
    dependsOn copyServerJar

    tag 'versioned', "hub.docker.com/${name}:${version}"
    dockerfile file('docker/Dockerfile')
    files 'docker/entrypoint.sh', "$buildDir/docker-jar/inspectit-ocelot-configurationserver.jar"
}
