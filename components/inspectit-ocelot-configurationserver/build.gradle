import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
    alias(libs.plugins.comPalantirDocker)
    alias(libs.plugins.orgSpringframeworkBoot)
    alias(libs.plugins.orgCyclonedxBom)
    alias(libs.plugins.ioSpringDependencyManagement)
}

apply plugin: 'idea'
apply plugin: 'java'

def serverMainClass = 'rocks.inspectit.ocelot.ConfigurationServer'

bootJar {
    archiveBaseName = 'inspectit-ocelot-configurationserver-noui'
    archiveVersion = "${buildVersion}"

    mainClass = "${serverMainClass}"
}

/**
 * Builds the configuration server and the web frontend.
 */
tasks.register('bootJarWithFrontend', BootJar) {
    group = "build"
    archiveBaseName = 'inspectit-ocelot-configurationserver'
    archiveVersion = "${buildVersion}"

    from("${project.projectDir}/../inspectit-ocelot-configurationserver-ui/out") {
        into('static/ui')
    }

    mainClass = "${serverMainClass}"

    with bootJar
}
bootJarWithFrontend.dependsOn ':inspectit-ocelot-configurationserver-ui:buildFrontend'

cyclonedxBom {
    includeConfigs = ["runtimeClasspath"]
    // Specifies the version of the CycloneDX specification to use.
    schemaVersion = "1.4"
    // Specifies the type of project being built. Defaults to 'library'
    projectType = "application"
}

repositories {
    mavenCentral()
}
//to guarantee that the Configuration Server is compatible with Java 8 runtime environments
sourceCompatibility = 1.8 // Java version compatibility to use when compiling Java source.
targetCompatibility = 1.8 // Java version to generate classes for.
test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

dependencies {
    compileOnly libs.orgProjectlombokLombok
    annotationProcessor libs.orgProjectlombokLombok
}

dependencies {
    implementation(
            project(':inspectit-ocelot-config'),
            // this is necessary as inspectit-ocelot-config needs it, but can
            // only use a compile-only (see details over there)
            libs.ioOpentelemetryOpentelemetrySdkMetrics,
            project(':inspectit-ocelot-configdocsgenerator'),

            libs.orgSpringframeworkBootSpringBootStarterWeb,
            libs.orgSpringframeworkBootSpringBootStarterDataJpa,
            libs.orgSpringframeworkBootSpringBootStartervalidation,
            libs.orgSpringframeworkSecuritySpringSecurityWeb,
            libs.orgSpringframeworksecuritySpringSecurityConfig,
            libs.orgSpringframeworkLdapSpringLdapCore,
            libs.orgSpringframeworkSecuritySpringSecurityLdap,
            libs.orgSpringframeworkBootSpringBootStarterActuator,

            libs.orgYamlSnakeyaml,

            libs.orgApacheHttpcomponentsHttpclient, //Required for PATCH-Requests

            libs.orgXerialSqliteJdbc,
            libs.comGithubGwennSqliteDialect,
            libs.bundles.jsonwebtoken,
            libs.commonsIo,
            libs.orgApacheCommonsCommonsLang3,
            libs.orgFlywaydbFlywayCore,
            libs.bundles.jgit,
            libs.comGoogleCodeGson,

            // swagger
            libs.orgSpringdocSpringdocOpenapiUi,

            libs.comGoogleGuavaConfigServer
    )
    testImplementation(
            libs.orgSpringframeworkBootSpringBootStarterTest,
            libs.orgSpringframeworkSecuritySpringSecurityTest,
            libs.orgJunitJupiterJunitJupiterApi,
            libs.orgMockitoMockitoJunitJupiter,
            libs.comH2databaseH2,
            libs.orgAwaitility
    )
    testRuntimeOnly libs.orgJunitJupiterJunitJupiterEngine

    constraints {
        implementation(libs.orgYamlSnakeyaml) {
            because 'spring related'
        }
        testImplementation(libs.comH2databaseH2) {
            because 'If we stick to the version provided by Spring Boot Bom database initialization scripts will fail'
        }
    }
}

tasks.register('copyServerJar', Copy) {
    dependsOn bootJarWithFrontend
    from("${buildDir}/libs/inspectit-ocelot-configurationserver-${version}.jar")
    into("${buildDir}/docker-jar")
    rename("inspectit-ocelot-configurationserver-${version}\\.jar",
            'inspectit-ocelot-configurationserver.jar')
}

docker {
    name "inspectit/inspectit-ocelot-configurationserver"
    dependsOn copyServerJar

    tag 'versioned', "hub.docker.com/${name}:${version}"
    dockerfile file('docker/Dockerfile')
    files 'docker/entrypoint.sh', "$buildDir/docker-jar/inspectit-ocelot-configurationserver.jar"
}
