import com.github.jk1.license.render.TextReportRenderer

plugins {
    id "com.github.jk1.dependency-license-report" version "${licenseReportVersion}"
    id("org.owasp.dependencycheck") version "${owaspDependencycheckVersion}" apply false
    id("com.github.ben-manes.versions") version "${versionsPluginVersion}" apply false
}

licenseReport {
    outputDir = "$projectDir/build/licenses"

    renderers = [new TextReportRenderer("../../THIRD-PARTY-LICENSES.txt")]
}

allprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'com.github.ben-manes.versions'

    if (!project.hasProperty('buildVersion') || project.getProperty('buildVersion').empty) {
        ext.buildVersion = 'SNAPSHOT'
    }

    version = "$buildVersion"

    dependencyCheck {
        //failBuildOnCVSS = 6
        scanProjects = [
                ':inspectit-ocelot-agent',
                ':inspectit-ocelot-core',
                ':inspectit-ocelot-sdk',
                ':inspectit-ocelot-bootstrap',
                ':inspectit-ocelot-configurationserver',
                ':inspectit-ocelot-configurationserver-ui'
        ]
        skipConfigurations = ["jmh", "jmhCompileClasspath", "systemTest", "systemTestCompileClasspath", "systemTestRuntimeClasspath"]
        analyzers {
            assemblyEnabled = false
            ossIndex {
                enabled = true
            }
            nodeAudit {
                yarnEnabled = false
            }
        }
    }

    tasks.named("dependencyUpdates").configure {
        revision = 'milestone'
        gradleReleaseChannel = "current"
        checkConstraints = true
        checkBuildEnvironmentConstraints = true
        outputFormatter = 'plain'
        outputDir = 'build/reports'
        reportfileName = 'dependencyUpdates'
    }
}

tasks.register('codeCoverageReport', JacocoReport) {
    group = 'Verification'
    description = 'Generates a combined report from all subprojects'

    executionData { fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec") }

    dependsOn(':inspectit-ocelot-agent:systemTest')
    dependsOn(':inspectit-ocelot-agent:test')
    dependsOn(':inspectit-ocelot-bootstrap:test')
    dependsOn(':inspectit-ocelot-config:test')
    dependsOn(':inspectit-ocelot-core:test')


    [project(':inspectit-ocelot-agent'), project(':inspectit-ocelot-bootstrap'), project(':inspectit-ocelot-config'), project(':inspectit-ocelot-core')].each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco/html")
        csv.enabled false
    }
}
