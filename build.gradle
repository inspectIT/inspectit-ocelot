import com.github.jk1.license.render.TextReportRenderer
import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask

plugins {
    alias(libs.plugins.nlLittlerobotsVersionCatalogUpdate)
    alias(libs.plugins.comGithubJk1DependencyLicenseReport)
    alias(libs.plugins.orgOwaspDependencycheck) apply false
    alias(libs.plugins.comGithubBenManesVersions)
}

licenseReport {
    outputDir = "$projectDir/build/licenses"

    renderers = [new TextReportRenderer("../../THIRD-PARTY-LICENSES.txt")]
}

allprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'

    if (!project.hasProperty('buildVersion') || project.getProperty('buildVersion').empty) {
        ext.buildVersion = 'SNAPSHOT'
    }

    version = "$buildVersion"

    dependencyCheck {
        //failBuildOnCVSS = 6
        scanProjects = [
                ':inspectit-ocelot-agent',
                ':inspectit-ocelot-core',
                ':inspectit-ocelot-sdk',
                ':inspectit-ocelot-bootstrap',
                ':inspectit-ocelot-configurationserver',
                ':inspectit-ocelot-configurationserver-ui'
        ]
        skipConfigurations = ["jmh", "jmhCompileClasspath", "systemTest", "systemTestCompileClasspath", "systemTestRuntimeClasspath"]
        analyzers {
            assemblyEnabled = false
            ossIndex {
                enabled = true
            }
            nodeAudit {
                yarnEnabled = false
            }
        }
    }


}

versionCatalogUpdate {
    // sort the catalog by key (default is true)
    sortByKey = true
    keep {
        // keep versions without any library or plugin reference
        keepUnusedVersions = true
        // keep all libraries that aren't used in the project
        keepUnusedLibraries = true
        // keep all plugins that aren't used in the project
        keepUnusedPlugins = true
    }

    versionCatalogs {
        configServerLibs {
            catalogFile = file("gradle/configserverlibs.versions.toml")
        }
    }
}

tasks.withType(DependencyUpdatesTask).configureEach {
    // default settings
    revision = 'milestone'
    gradleReleaseChannel = "current"
    checkConstraints = true
    checkBuildEnvironmentConstraints = true
    outputFormatter = 'json,plain'
}

def isNonStable = { String candidate ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE'].any { it -> candidate.toUpperCase().contains(it) }
    def versionRegex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(candidate ==~ versionRegex)
}

def isNotSameMajorMinor = { String current, String candidate, boolean matchMinor ->
    if(current.equals(candidate)) return false

    def firstDot = current.indexOf('.')
    def secondDot = current.indexOf('.', firstDot + 1)
    def major = current.substring(0, firstDot)
    def minor = current.substring(firstDot + 1, secondDot)
    def majorRegex = /^$major\..*/
    def minorRegex = /^$major\.${minor}\..*/
    return !((candidate ==~ majorRegex) && (!matchMinor || (candidate ==~ minorRegex)))
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        // only patch updates
        isNonStable(it.candidate.version) || isNotSameMajorMinor(it.currentVersion, it.candidate.version, true)
    }
}

tasks.register('dependencyUpdatesMinor', DependencyUpdatesTask) {
    rejectVersionIf {
        // only minor updates
        isNonStable(it.candidate.version) || isNotSameMajorMinor(it.currentVersion, it.candidate.version, false)
    }
}

tasks.register('dependencyUpdatesMajor', DependencyUpdatesTask) {
    rejectVersionIf {
        // all updates including major updates
        isNonStable(it.candidate.version)
    }
}

tasks.register('codeCoverageReport', JacocoReport) {
    group = 'Verification'
    description = 'Generates a combined report from all subprojects'

    executionData { fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec") }

    dependsOn(':inspectit-ocelot-agent:systemTest')
    dependsOn(':inspectit-ocelot-agent:test')
    dependsOn(':inspectit-ocelot-bootstrap:test')
    dependsOn(':inspectit-ocelot-config:test')
    dependsOn(':inspectit-ocelot-core:test')


    [project(':inspectit-ocelot-agent'), project(':inspectit-ocelot-bootstrap'), project(':inspectit-ocelot-config'), project(':inspectit-ocelot-core')].each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco/html")
        csv.enabled false
    }
}
