inspectit:
  instrumentation:
    actions:

      'a_regex_replaceAll':
        docs:
          description: |-
            Replaces all matches for the provided regex pattern with the given replacement string.
            If the input string is null, null is returned.
        imports:
          - 'java.util'
        input:
          'string': 'String'
          'pattern': 'String'
          'replacement': 'String'
        value-body: |
          if (string == null) {
            return null;
          }
          return string.replaceAll(pattern, replacement);

      'a_regex_replaceAll_multi':
        docs:
          description: |-
            Replaces all matches for all of the provided regex patterns with the given replacement strings.
            If the input string is null, null is returned.
            
            the patterns_and_replacements are expected to be a list of the following form:
            constant-input:
              patterns_and_replacements:
              - pattern: <regexA>
              replacement: <replacementA>
              - pattern: <regexB>
              replacement: <replacementA>
              
            The replacement is executed in the order of the inputs.
        imports:
          - 'java.util'
        input:
          'string': 'String'
          'patterns_and_replacements': 'Map'
        value-body: |
          if (string == null) {
            return null;
          }
          String result = string;
          for (int i = 0; i < patterns_and_replacements.size(); i++) {
            Map patAndRepl = (Map) patterns_and_replacements.get(String.valueOf(i));
            String regex = (String) patAndRepl.get("pattern");
            String replacement = Objects.toString(patAndRepl.get("replacement"));
            result = result.replaceAll(regex, replacement);
          }
          return result;

      'a_regex_replaceMatch':
        docs:
          description: |-
            Replaces the provided input string if it fully matches a given regex.
            If the input string is null, null is returned.
        imports:
          - 'java.util'
          - 'java.util.regex'
        input:
          'string': 'String'
          'pattern': 'String'
          'replacement': 'String'
        value-body: |
          if (string == null) {
            return null;
          }
          Pattern regex = Pattern.compile(pattern);
          Matcher m = regex.matcher(string);
          if (m.matches()) {
            StringBuffer result = new StringBuffer();
            m.appendReplacement(result, replacement);
            return result.toString();
          }
          return string;

      'a_regex_replaceMatch_multi':
        docs:
          description: |-
            Scans the provided list of regexes to check if any matches the input string fully.
            If a match is found, it is replaced with the provided replacement and returned.
            If the input string is null, null is returned.
            
            the patterns_and_replacements are expected to be a list of the following form:
            constant-input:
              patterns_and_replacements:
                - pattern: <regexA>
                  replacement: <replacementA>
                - pattern: <regexB>
                  replacement: <replacementA>
            
            The replacement is executed in the order of the inputs.
        imports:
          - 'java.util'
          - 'java.util.regex'
        input:
          'string': 'String'
          'patterns_and_replacements': 'Map'
        value-body: |
          if (string == null) {
            return null;
          }
          String result = string;
          for (int i = 0; i < patterns_and_replacements.size(); i++) {
            Map patAndRepl = (Map) patterns_and_replacements.get(String.valueOf(i));
            String pattern = (String) patAndRepl.get("pattern");
            String replacement = Objects.toString(patAndRepl.get("replacement"));
            Pattern regex = Pattern.compile(pattern);
            Matcher m = regex.matcher(result);
            if (m.matches()) {
              StringBuffer sb = new StringBuffer();
              m.appendReplacement(sb, replacement);
              result = sb.toString();
            }
          }
          return result;

      'a_regex_replaceFirst':
        docs:
          description: |-
            Replaces the first match for the provided regex pattern with the given replacement string.
            If the input string is null, null is returned.
        imports:
          - 'java.util'
          - 'java.util.regex'
        input:
          'string': 'String'
          'pattern': 'String'
          'replacement': 'String'
        value-body: |
          if (string == null) {
            return null;
          }
          Pattern regex = Pattern.compile(pattern);
          Matcher m = regex.matcher(string);
          if (m.matches()) {
            return m.replaceFirst(replacement);
          }
          return string;

      'a_regex_extractMatch':
        docs:
          description: |-
            Checks if the given input string fully matches the provided regex.
            If it does, the result is returned. If "result" is a string, then capturing groups ($1,$2, etc) are populated.
            If the input string is null or the input string does not match the regex, null is returned.
        imports:
          - 'java.util'
          - 'java.util.regex'
        input:
          'string': 'String'
          'pattern': 'String'
          'result': 'Object'
        value-body: |
          if (string == null) {
            return null;
          }
          Pattern regex = Pattern.compile(pattern);
          Matcher m = regex.matcher(string);
          if (m.matches()) {
            if (result instanceof String) {
              StringBuffer sb = new StringBuffer();
              m.appendReplacement(sb, (String) result);
              return sb.toString();
            } else {
              return result;
            }
          }
          return null;

      'a_regex_extractMatch_multi':
        docs:
          description: |-
            Checks if the given input string fully matches any of the provided regexes.
            If it does, the result for the matching regex is returned. If "result" is a string, then capturing groups ($1,$2, etc) are populated.
            The checking happens in the order of the list, meaning that the replacement for the first matching regex is returned.
            If the input string is null or the input string does not match the regex, null is returned. 
            
            the patterns_and_results are expected to be a list of the following form:
            constant-input:
              patterns_and_results:
                - pattern: <regexA>
                  result: <resultA>
                - pattern: <regexB>
                  result: <resultA>
        imports:
          - 'java.util'
          - 'java.util.regex'
        input:
          'string': 'String'
          'patterns_and_results': 'Map'
        value-body: |
          if (string == null) {
            return null;
          }
          for (int i = 0; i < patterns_and_results.size(); i++) {
            Map patAndRepl = (Map) patterns_and_results.get(String.valueOf(i));
            String pattern = (String) patAndRepl.get("pattern");
            Object result = patAndRepl.get("result");
            Pattern regex = Pattern.compile(pattern);
            Matcher m = regex.matcher(string);
            if (m.matches()) {
              if (result instanceof String) {
                StringBuffer sb = new StringBuffer();
                m.appendReplacement(sb, (String) result);
                return sb.toString();
              } else {
                return result;
              }
            }
          }
          return null;

      'a_regex_extractFirst':
        docs:
          description: |-
            Checks if the given input string has any match for the provided regex.
            If it does, the result is returned. If "result" is a string, then capturing groups ($1,$2, etc) are populated.
            If the input string is null or the input string does not match the regex, null is returned.
        imports:
          - 'java.util'
          - 'java.util.regex'
        input:
          'string': 'String'
          'pattern': 'String'
          'result': 'Object'
        value: |
          if(string == null) {
            return null;
          }
          Pattern regex = Pattern.compile(pattern);
          Matcher m = regex.matcher(string);
          if (m.find()) {
            if(result instanceof String) {
              StringBuffer sb = new StringBuffer();
              m.appendReplacement(sb, (String)result);
              return sb.toString();
            } else {
              return result;
            }
          }
          return null;

      'a_regex_extractFirst_multi':
        docs:
          description: |-
            Checks if the given input string contains a match for any of the provided regexes.
            If it does, the result for the matching regex is returned. If "result" is a string, then capturing groups ($1,$2, etc) are populated.
            The checking happens in the order of the list, meaning that the replacement for the first matching regex is returned.
            If the input string is null or the input string does not match the regex, null is returned.
           
            the patterns_and_results are expected to be a list of the following form:
            constant-input:
              patterns_and_results:
               - pattern: <regexA>
                 result: <resultA>
               - pattern: <regexB>
                 result: <resultA>
        imports:
          - 'java.util'
          - 'java.util.regex'
        input:
          'string': 'String'
          'patterns_and_results': 'Map'
        value-body: |
          if (string == null) {
            return null;
          }
          for (int i = 0; i < patterns_and_results.size(); i++) {
            Map patAndRepl = (Map) patterns_and_results.get(String.valueOf(i));
            String pattern = (String) patAndRepl.get("pattern");
            Object result = patAndRepl.get("result");
            Pattern regex = Pattern.compile(pattern);
            Matcher m = regex.matcher(string);
            if (m.find()) {
              if (result instanceof String) {
                StringBuffer sb = new StringBuffer();
                m.appendReplacement(sb, (String) result);
                return sb.toString();
              } else {
                return result;
              }
            }
          }
          return null;