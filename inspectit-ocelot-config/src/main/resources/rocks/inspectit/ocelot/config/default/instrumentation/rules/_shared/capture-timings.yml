inspectit:
  instrumentation:
    rules:

      'r_capture_method_duration':
        docs:
          description: 'When applied to a method, this rule will populate method_duration with the duration the method execution took.'
        include:
          'r_capture_method_duration_conditional': true
        entry:
          'capture_time_condition':
            action: 'a_assign_true'

      'r_capture_method_duration_conditional':
        docs:
          description: |-
            Conditionally captures the execution time of the current method into method_duration
            The capturing will only happen it capture_time_condition is defined as true.
            For example, http instrumentation define capture_time_condition based on http_is_entry
            The condition is there to prevent unnecessary invocations of System.nanoTime(), which can be expensive
        include:
          'r_capture_method_entry_timestamp_conditional': true
        exit:
          'method_duration':
            only-if-true: 'capture_time_condition'
            action: 'a_timing_elapsedMillis'
            data-input: 
              'since_nanos': 'method_entry_time'

      'r_capture_method_entry_timestamp_conditional':
        docs:
          description: |-
            Conditionally captures the entry timestamp of the current method into method_entry_time
            The capturing will only happen it capture_time_condition is defined as true.
            For example, http instrumentation define capture_time_condition based on http_is_entry
            The condition is there to prevent unnecessary invocations of System.nanoTime(), which can be expensive
        entry:
          'method_entry_time':
            only-if-true: 'capture_time_condition'
            action: 'a_timing_nanos'
      
        
