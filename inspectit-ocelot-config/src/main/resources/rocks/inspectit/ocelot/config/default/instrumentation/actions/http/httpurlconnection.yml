inspectit:
  instrumentation:
    actions:

      'a_httpurlconnection_getTargetHost':
        docs:
          description: 'Extracts the target of the request in the format "host:port".'
        imports:
          - 'java.net'
        input:
          _this: 'HttpURLConnection'
        value-body: |
          URL url = _this.getURL();
          int port = url.getPort();
          if (port == -1) {
            return url.getHost();
          } else {
            return url.getHost() + ":" + port;
          }

      'a_httpurlconnection_getPath':
        docs:
          description: 'Extracts the target path of the request.'
        input:
          _this: 'java.net.HttpURLConnection'
        value: '_this.getURL().getPath()'

      'a_httpurlconnection_getMethod':
        docs:
          description: 'Extracts the method of the request, e.g. GET or POST.'
        input:
          _this: 'java.net.HttpURLConnection'
        value: '_this.getRequestMethod()'

      'a_httpurlconnection_getStatus':
        docs:
          description: |-
            Extracts the response status code if the request returned without an exception.
            Otherwise returns the name of the exception, e.g. SocketTimeoutException.'
        input:
          _this: 'java.net.HttpURLConnection'
        value-body: |
          try {
            return String.valueOf(_this.getResponseCode());
          } catch (Throwable t) {
            return t.getClass().getSimpleName();
          }

      'a_httpurlconnection_downPropagation':
        docs:
          description: 'Writes down-propagated data to the HTTP Headers.'
        is-void: true
        imports:
          - 'java.util'
          - 'java.net'
        input:
          _this: 'HttpURLConnection'
          _attachments: 'ObjectAttachments'
          _context: 'InspectitContext'
        value-body: |
          Object propagationAlreadyPerformed = _attachments.attach(_this, "down_prop_performed", Boolean.TRUE);
          if (propagationAlreadyPerformed == null) {
            try {
              Map headers = _context.getDownPropagationHeaders();
              Iterator it = headers.entrySet().iterator();
              while (it.hasNext()) {
                Map$Entry e = (Map$Entry) it.next();
                _this.setRequestProperty((String) e.getKey(), (String) e.getValue());
              }
            } catch (Exception e) {
              // silently ignore, this will occur if the url has already been connected
              // normally does not happen, as we also instrument connect()
              // it can still happen if connect() is instrumented last
            }
          }

      'a_httpurlconnection_upPropagation':
        docs:
          description: 'Reads up-propagated data from the HTTP Headers'
        is-void: true
        imports:
          - 'java.util'
          - 'java.net'
        input:
          _this: 'HttpURLConnection'
          _attachments: 'ObjectAttachments'
          _context: 'InspectitContext'
        value-body: |
          Object propagationAlreadyPerformed = _attachments.attach(_this, "up_prop_performed", Boolean.TRUE);
          if (propagationAlreadyPerformed == null) {
            Collection headerKeys = _context.getPropagationHeaderNames();
            Map presentHeaders = new HashMap();
            Iterator it = headerKeys.iterator();
            while (it.hasNext()) {
              String name = (String) it.next();
              List values = _this.getHeaderFields().get(name);
              if (values != null) {
                presentHeaders.put(name, String.join(",", values));
              }
            }
            _context.readUpPropagationHeaders(presentHeaders);
          }