inspectit:

  # the name of the service which is being instrumented
  service-name: "InspectIT Agent"

  # defines common tags to be be set on the metrics
  tags:
    # different tag providers that can be configured
    providers:
      # environment provider adds 'service-name', 'host' and 'host-address' tags
      environment:
        # if environment provider is enabled
        enabled: true
        # should the host name be resolved using InetAddress.getLocalHost(), if false 'host' tag is not added by env provider
        resolve-host-name: true
        # should the host address be resolved using InetAddress.getLocalHost(), if false 'host-address' tag is not added by env provider
        resolve-host-address: true
    # specifies user defined tag keys and values as a map
    # these tag values would overwrite any value added by the providers, thus you can easily overwrite tags values by your own
    extra: { }

  # general settings regarding trace capturing
  tracing:
    # master switch for trace capturing. When set to false the following happens:
    #  - all trace exporters are disabled
    #  - tracing is disabled for all instrumentation rules
    enabled: true
    # global sample probability used to decide if a trace shall be sampled or not
    # this value can be overridden by the tracing settings of individual instrumentation rules.
    sample-probability: 1.0
    # global default sample mode used to decide if a trace shall be sampled or not. Can either be 'PARENT_BASED', 'TRACE_ID_RATIO_BASED' or 'HYBRID_PARENT_TRACE_ID_RATIO_BASED'
    sample-mode: PARENT_BASED
    # the format for propagating correlation headers.
    # options are: B3, TRACE_CONTEXT, DATADOG
    propagation-format: B3
    # defines when to add common tags as attributes to spans
    # options are: NEVER, ON_GLOBAL_ROOT, ON_LOCAL_ROOT, ALWAYS
    add-common-tags: ON_LOCAL_ROOT
    # if enabled, metric tags will be added as attributes to tracing within the same rule
    add-metric-tags: true
    # settings regarding automatic tracing (stack-trace-sampling)
    auto-tracing:
      frequency: 50ms
      shutdown-delay: 30s
    # whether the agent should use 64 bit trace ids instead of 128 bit trace ids
    use-64-bit-trace-ids: false
    # settings regarding log correlation
    log-correlation:
      trace-id-mdc-injection:
        # whether existing trace ids should be injected into the logging framework's MDC
        enabled: false
        # the key which is used to store the trace id in the MDC
        key: "traceid"
        # Opt-out option for slf4J
        slf4j-enabled: true
        # Opt-out option for Log4J1
        log4j1-enabled: true
        # Opt-out option for Log4J2
        log4j2-enabled: true
        # Opt-out option for JBoss Logmanager
        jboss-logmanager-enabled: true
      trace-id-auto-injection:
        # whether the trace id should automatically injected into log statements
        enabled: false
        # the prefix to use when injecting a trace id
        prefix: "[TraceID: "
        # the suffix to use when injecting a trace id
        suffix: "]"
    # the maximum batch size for every span export, i.e., the maximum number of spans exported by the used BatchSpanProcessor
    max-export-batch-size: 512
    # the delay interval between two consecutive exports in milliseconds.
    schedule-delay-millis: 5000

  # general settings regarding metrics capturing
  metrics:
    # master switch for metrics capturing. When set to false the following happens:
    #  - all metrics exporters are disabled
    #  - all metrics recorders are disabled
    #  - no measurement values are collected via instrumentation, however the instrumentation is still performed
    #  - no views and measures are created
    enabled: true

    tag-guard:
      enabled: true
      max-values-per-tag: 1000
      schedule-delay: 30s
      database-file : ${inspectit.env.agent-dir}/${inspectit.service-name}/tag-guard-database.json
      overflow-replacement: "TAG_LIMIT_EXCEEDED"

  # logging settings
  logging:
    # path to a custom user-specified logback config file that should be used
    config-file:
    # properties below only work if the default inspectIT Ocelot logback config file is used
    # sets the inspectIT Ocelot log level to TRACE
    trace: false
    # sets the level to DEBUG (only if trace is false)
    debug: false
    # settings for the console output
    console:
      # defines if the console output is enabled
      enabled: true
      # defines a custom pattern to output to the console
      pattern:
    # settings for the file-based log output
    # inspectIT Ocelot will create two log files: agent.log and exceptions.log
    file:
      # defines if the file-based log output is enabled
      enabled: true
      # defines a custom pattern to output to the console
      pattern:
      # defines a custom path where log files should be placed (defaults to /tmp/inspectit-oce)
      path:
      # if the default pattern should include the service name (specified with inspectit.service-name)
      # helpful when you run more than one service on the same host
      include-service-name: true

  # defines how many threads inspectIT may start for its internal tasks
  thread-pool-size: 2

  # settings for the agent commands and communication
  agent-commands:
    # whether agent commands are enabled or not
    enabled: false
    # the URL for fetching agent commands - e.g.: http://localhost:8090/api/v1/agent/command
    url:
    # whether the agent commands URL should be derived from the HTTP configuration URL
    derive-from-http-config-url: false
    # path which is used for the agent command URL in case it is derived from the HTTP configuration URL
    agent-command-path: "/api/v1/agent/command"
    # the timeout duration used when the agent is in discovery mode. Defining how long the agent
    # will wait for new commands.
    # This value must be greater than the max response timeout from the config server.
    live-socket-timeout: 40s
    # the timeout duration used for requests when the agent is in normal mode
    socket-timeout: 5s
    # the used interval for polling commands
    polling-interval: 15s
    # how long the agent will staying in the live mode, before falling back to the normal mode
    live-mode-duration: 2m
    retry:
      # true if retries are enabled, false otherwise
      enabled: true
      # The maximum number of attempts to try to fetch the configuration
      max-attempts: 7
      # The initial interval to wait after the first failed attempt.
      initial-interval: 15s
      # For each retry the last interval to wait is multiplied with this number to calculate the next interval to wait
      multiplier: 2
      # This factor introduces randomness to what the actual wait interval will be. This prevents that a lot of agents will issue requests towards the configuration server at the same time.
      randomization-factor: 0.1

  log-preloading:
    enabled: false
    log-level: WARN
    buffer-size: 128
