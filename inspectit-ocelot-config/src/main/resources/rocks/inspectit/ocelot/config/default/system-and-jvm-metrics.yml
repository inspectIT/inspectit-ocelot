inspectit:
  metrics:
    frequency: 15s
    # settings regarding disk related metrics
    disk:
      enabled:
        # if true, the free disk space will be measured and the view "disk/free" is registered
        free: true
        # if true, the total disk space will be measured and the view "disk/total" is registered
        total: true
      # specifies the frequency with which the disk metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}
    # settings regarding the measurement of the loaded classes
    classloader:
      enabled:
        # if true, the number of loaded classes will be captured
        loaded: true
        # if true, the number of unloaded classes will be captures
        unloaded: true
      # specifies the frequency with which the classloader metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}
    # settings regarding the capturing of processor related metrics
    processor:
      enabled:
        # if true, the number of processors available to the jvm will be captured
        count: true
        # if true, the average load of the last minute of the system load will be captured
        system.average: true
        # if true, the current cpu usage of the system will be captured
        system.usage: true
        # if true, the current cpu usage of this process will be captured
        process.usage: true
      # specifies the frequency with which the processor metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}
    # settings regarding the capturing of threads related metrics
    threads:
      enabled:
        # if true, the peak number of live threads since JVM start is captured
        peak: true
        # if true, the current daemon thread count is captured
        daemon: true
        # if true, the current total number of live threads is captured
        live: true
        # if true, for each thread state the number of live threads will be captured
        states: true
      # specifies the frequency with which the thread metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}
    # settings regarding the capturing of garbage collection related metrics
    gc:
      enabled:
        # if true, the maximum size of the old generation pool is captured
        max.data.size: true
        # if true, the size of the old generation pool after a full GC is captured
        live.data.size: true
        # if true, the time spent in the concurrent gc phase is captured
        concurrent.phase.time: true
        # if true, the time spent during gc pauses is captured
        pause: true
        # if true, the count of positive increases in the size of the old generation memory pool before GC to after GC is captured
        memory.promoted: true
        # if true, the increase in the size of the young generation memory pool after one GC to before the next is captured
        memory.allocated: true
    # settings regarding the capturing of memory related metrics
    memory:
      enabled:
        # if true, the amount of used memory will be captured
        used: true
        # if true, the amount of committed memory for the JVM to use will be captured
        committed: true
        # if true, the maximum amount of memory that can be used for memory management will be captured
        max: true
        # if true, an estimate of the number of buffers for each buffer pool will be captured
        buffer.count: true
        # if true, an estimate of the used memory for each buffer pool will be captured
        buffer.used: true
        # if true, the total capacity of the buffers for each buffer pool will be captured
        buffer.capacity: true
      # specifies the frequency with which the memory metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}
    # settings regarding the capturing of concurrency related metrics
    concurrent:
      enabled:
        # if true, it is possible to record concurrent invocations within rules
        # concurrent invocations will not be recorded automatically but only when enabled within rules!
        invocations: false
      # specifies the frequency with which the concurrent invocations metrics should be polled and recorded
      frequency: ${inspectit.metrics.frequency}

    definitions:
      '[disk/free]':
        enabled: '${inspectit.metrics.disk.enabled.free}'
        type: LONG
        unit: bytes
        description: "free disk space"
      '[disk/total]':
        enabled: ${inspectit.metrics.disk.enabled.total}
        type: LONG
        unit: bytes
        description: "total disk space"

      '[jvm/classes/loaded]':
        enabled: ${inspectit.metrics.classloader.enabled.loaded}
        type: LONG
        unit: classes
        description: "total number of classes currently loaded in the JVM"
      '[jvm/classes/unloaded]':
        enabled: ${inspectit.metrics.classloader.enabled.unloaded}
        type: LONG
        unit: classes
        description: "total number of classes which have been unloaded since the start of the JVM"

      '[jvm/gc/concurrent/phase/time]':
        enabled: ${inspectit.metrics.gc.enabled.concurrent.phase.time}
        type: LONG
        unit: ms
        description: "the time spent in concurrent GC phases"
        views:
          '[jvm/gc/concurrent/phase/time]':
            aggregation: SUM
            tags: {cause: true, action: true}
      '[jvm/gc/pause]':
        enabled: ${inspectit.metrics.gc.enabled.pause}
        type: LONG
        unit: ms
        description: "the time spent in GC pause"
        views:
          '[jvm/gc/pause]':
            aggregation: SUM
            tags: {cause: true, action: true}
      '[jvm/gc/memory/promoted]':
        enabled: ${inspectit.metrics.gc.enabled.memory.promoted}
        type: LONG
        unit: bytes
        description: "the count of positive increases in the size of the old generation memory pool before GC to after GC"
        views:
          '[jvm/gc/memory/promoted]': {aggregation: SUM}
      '[jvm/gc/live/data/size]':
        enabled: ${inspectit.metrics.gc.enabled.live.data.size}
        type: LONG
        unit: bytes
        description: "the size of the old generation memory pool after a full GC"
      '[jvm/gc/max/data/size]':
        enabled: ${inspectit.metrics.gc.enabled.max.data.size}
        type: LONG
        unit: bytes
        description: "the maximum size of the old generation memory pool"
      '[jvm/gc/memory/allocated]':
        enabled: ${inspectit.metrics.gc.enabled.memory.allocated}
        type: LONG
        unit: bytes
        description: "the increase in the size of the young generation memory pool after one GC to before the next"
        views:
          '[jvm/gc/memory/allocated]': {aggregation: SUM}

      '[jvm/memory/used]':
        enabled: ${inspectit.metrics.memory.enabled.used}
        type: LONG
        unit: bytes
        description: "the amount of used memory"
        views:
          '[jvm/memory/used]':
            aggregation: LAST_VALUE
            tags: {id : true, area : true}
      '[jvm/memory/committed]':
        enabled: ${inspectit.metrics.memory.enabled.committed}
        type: LONG
        unit: bytes
        description: "the amount of memory that is committed for the JVM to use"
        views:
          '[jvm/memory/committed]':
            aggregation: LAST_VALUE
            tags: {id: true, area: true}
      '[jvm/memory/max]':
        enabled: ${inspectit.metrics.memory.enabled.max}
        type: LONG
        unit: bytes
        description: "the maximum amount of memory that can be used for memory management"
        views:
          '[jvm/memory/max]':
            aggregation: LAST_VALUE
            tags: {id: true, area: true}
      '[jvm/buffer/count]':
        enabled: ${inspectit.metrics.memory.enabled.buffer.count}
        type: LONG
        unit: buffers
        description: "an estimate of the number of buffers in the pool"
        views:
          '[jvm/buffer/count]':
            aggregation: LAST_VALUE
            tags: {id: true}
      '[jvm/buffer/memory/used]':
        enabled: ${inspectit.metrics.memory.enabled.buffer.used}
        type: LONG
        unit: bytes
        description: "an estimate of the memory that the JVM is using for this buffer pool"
        views:
          '[jvm/buffer/memory/used]':
            aggregation: LAST_VALUE
            tags: {id: true}
      '[jvm/buffer/total/capacity]':
        enabled: ${inspectit.metrics.memory.enabled.buffer.capacity}
        type: LONG
        unit: bytes
        description: "an estimate of the total capacity of the buffers in this pool"
        views:
          '[jvm/buffer/total/capacity]':
            aggregation: LAST_VALUE
            tags: {id: true}

      '[system/cpu/count]':
        enabled: ${inspectit.metrics.processor.enabled.count}
        type: LONG
        unit: cores
        description: "the number of processors available to the JVM"
      '[system/load/average/1m]':
        enabled: ${inspectit.metrics.processor.enabled.system.average}
        type: DOUBLE
        unit: percentage
        description: >-
          the sum of the number of runnable entities queued to available processors and the number
          of runnable entities running on the available processors averaged over a period of time
      '[system/cpu/usage]':
        enabled: ${inspectit.metrics.processor.enabled.system.usage}
        type: DOUBLE
        unit: cores
        description: "the recent cpu usage for the whole system"
      '[process/cpu/usage]':
        enabled: ${inspectit.metrics.processor.enabled.process.usage}
        type: DOUBLE
        unit: cores
        description: "the recent cpu usage for the JVM's process"

      '[jvm/threads/peak]':
        enabled: ${inspectit.metrics.threads.enabled.peak}
        type: LONG
        unit: threads
        description: "the peak number of live threads since the JVM start"
      '[jvm/threads/daemon]':
        enabled: ${inspectit.metrics.threads.enabled.daemon}
        type: LONG
        unit: threads
        description: "the current number of live daemon threads"
      '[jvm/threads/live]':
        enabled: ${inspectit.metrics.threads.enabled.live}
        type: LONG
        unit: threads
        description: "the current number of total live threads"
      '[jvm/threads/states]':
        enabled: ${inspectit.metrics.threads.enabled.states}
        type: LONG
        unit: threads
        description: "the number of live threads for each state"
        views:
          '[jvm/threads/states]':
            aggregation: LAST_VALUE
            tags: {state : true}

      '[inspectit/concurrent/invocations]':
        enabled: '${inspectit.metrics.concurrent.enabled.invocations}'
        type: LONG
        unit: invocations
        description: "the current amount of active invocations"
        views:
          '[inspectit/concurrent/invocations]':
            aggregation: LAST_VALUE
            tags: { operation: true }
