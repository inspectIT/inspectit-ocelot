plugins {
    id "me.champeau.gradle.jmh" version "0.5.3"
    id 'maven-publish'
    id 'com.palantir.docker' version "0.21.0"
}

evaluationDependsOn(':inspectit-ocelot-bootstrap')
evaluationDependsOn(':inspectit-ocelot-core')

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

group = 'rocks.inspectit.ocelot'

sourceCompatibility = 1.8 // Java version compatibility to use when compiling Java source.
targetCompatibility = 1.8 // Java version to generate classes for.


configurations {
    opentelemetry
}

dependencies {
    compileOnly(
            project(':inspectit-ocelot-bootstrap'),
            "org.projectlombok:lombok:${lombokVersion}"
    )

    opentelemetry(
        "io.opentelemetry:opentelemetry-sdk:${openTelemetryVersion}",
        "io.opentelemetry:opentelemetry-opencensus-shim:${openTelemetryAlphaVersion}",
        "io.opencensus:opencensus-impl:${openCensusVersion}",
    )
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation (
            'org.junit.jupiter:junit-jupiter-api:5.3.1',
            'org.mockito:mockito-junit-jupiter:2.23.0',
            "ch.qos.logback:logback-classic:${logbackVersion}",
    )
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

task copyAgent(type: Copy) {
    dependsOn jar
    from(buildDir.toString() + "/inspectit-ocelot-agent-${version}.jar")
    into(buildDir)
    rename ("inspectit-ocelot-agent-${version}\\.jar", 'inspectit-ocelot-agent.jar')
}

docker {
    dependsOn copyAgent

    name "inspectit/inspectit-ocelot-agent"
    tags "${version}"
    dockerfile file('docker/Dockerfile')
    files 'docker/entrypoint.sh', "$buildDir/inspectit-ocelot-agent.jar"
}

task buildOpenTelemetryFatJar(type: Jar){
    archiveFileName = "opentelemetry-fat.jar"
    destinationDirectory = file("$buildDir/jarGen")
    from{
        configurations.opentelemetry.collect{it.isDirectory() ? it : zipTree(it) }
    }
}

processJmhResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    destinationDirectory = buildDir
    archivesBaseName = "${project.name}"

    manifest {
        from file("src/main/resources/META-INF/MANIFEST.MF")
    }

    // include the open-telemetry dependencies as a fat jar
    dependsOn buildOpenTelemetryFatJar
    from "$buildDir/jarGen"

    from project(':inspectit-ocelot-bootstrap').jar.outputs
    from project(':inspectit-ocelot-core').jar.outputs

    //include all "implementation" dependencies in fat jar
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

//----------------------------------------------------------------------------------------------------------------------
// Based on the integration tests of https://github.com/census-instrumentation/opencensus-java/tree/master/contrib/agent
//----------------------------------------------------------------------------------------------------------------------

sourceSets {
    systemTest {
        java {
            srcDir file('src/system-test/java')
        }
        resources.srcDir file('src/system-test/resources')
    }
}

configurations {
    systemTestCompile.extendsFrom testImplementation
    jmh.extendsFrom systemTestImplementation
}

dependencies {

    systemTestCompileOnly(
            platform("io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}"),
            platform("io.opentelemetry:opentelemetry-bom-alpha:${openTelemetryAlphaVersion}"),
            "io.opentelemetry:opentelemetry-sdk",
            "io.opentelemetry:opentelemetry-opencensus-shim",
            "io.opencensus:opencensus-impl:${openCensusVersion}",

            project(':inspectit-ocelot-bootstrap')
    )

    systemTestImplementation(
            "io.opencensus:opencensus-testing:${openCensusVersion}",
            "io.opencensus:opencensus-api:${openCensusVersion}",

            // for InMemorySpanExporter
            platform("io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}"),
            "io.opentelemetry:opentelemetry-sdk-testing",
            "io.opentelemetry:opentelemetry-exporter-logging",
            platform("io.opentelemetry:opentelemetry-bom-alpha:${openTelemetryAlphaVersion}"),
            "io.opentelemetry:opentelemetry-semconv",

            'org.junit.jupiter:junit-jupiter-engine:5.3.1',
            'org.junit.jupiter:junit-jupiter-api:5.3.1',

            'org.assertj:assertj-core:3.11.1',
            'org.awaitility:awaitility:3.1.5',
            "com.github.tomakehurst:wiremock:2.25.1",

            'org.apache.httpcomponents:httpclient:4.5.6',
            'org.eclipse.jetty:jetty-server:9.4.3.v20170317',
            'org.eclipse.jetty:jetty-servlet:9.4.3.v20170317',

            'com.h2database:h2:1.4.199',

            // only used for log-correlation tests
            'org.apache.logging.log4j:log4j-api:2.15.0',
            'org.apache.logging.log4j:log4j-core:2.15.0',
            'log4j:log4j:1.2.16',
            'ch.qos.logback:logback-classic:1.2.10' // Used for SLF4J Correlation

    )

    jmh(
            sourceSets.systemTest.output,
            project(':inspectit-ocelot-bootstrap')
    )
}

if (!project.hasProperty("systemTestJavaHomes")) {
    ext.systemTestJavaHomes = System.properties['java.home']
}
def agentJarPath = jar.archivePath.toString()

task systemTest {
    group = 'Verification'
    description = "Runs system tests with the agent attached as javaagent for all JDKs configured via the 'systemTestJavaHomes' property."

    // Always run this task when its executed
    outputs.upToDateWhen { false }

    def javaExecutables = ("${systemTestJavaHomes}")
            .tokenize(File.pathSeparator)
            .collect {
                org.apache.tools.ant.taskdefs.condition.Os.isFamily(
                        org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)
                        ? "${it}/bin/java.exe"
                        : "${it}/bin/java"
            }
            .collect { new File(it).getCanonicalPath() }
            .unique()

    assert javaExecutables.size > 0:
            'No Java executables found for running system tests'

    javaExecutables.eachWithIndex { javaExecutable, index ->
        def paths = "${javaExecutable}".tokenize(File.separator)
        def javaName = "${index}"
        if (paths.size > 3) {
            javaName = paths[paths.size - 4] + "_" + paths[paths.size - 3]
        } else if (paths.length > 2) {
            javaName = paths[paths.size - 3]
        }

        def perVersionSystemTest = task("systemTest_${javaName}", type: Test) {

            group = 'Verification'
            description = "Runs system tests on ${javaExecutable}"


            useJUnitPlatform()

            testLogging {
                // Let Gradle output the stdout and stderr from tests, too. This is useful for investigating
                // test failures on Travis, where we can't view Gradle's test reports.
                showStandardStreams = true

                // Include the exception message and full stacktrace for failed tests.
                exceptionFormat 'full'
            }

            dependsOn jar

            testClassesDirs = sourceSets.systemTest.output.classesDirs
            classpath = sourceSets.systemTest.runtimeClasspath

            executable = javaExecutable

            jacoco {
                includeNoLocationClasses = true
                includes = ["rocks/inspectit/*"]
            }


            // The JaCoCo agent must be specified first so that it can instrument our agent.
            // This is a work around for the issue that the JaCoCo agent is added last, cf.
            // https://discuss.gradle.org/t/jacoco-gradle-adds-the-agent-last-to-jvm-args/7124.
            doFirst {

                def os = new ByteArrayOutputStream();
                exec {
                    executable = javaExecutable
                    args = ["-version"]
                    standardOutput = os
                    errorOutput = os
                }
                if (!os.toString().contains("\"1.8.")) {
                    //Turns the jigsaw warnings into errors, making the system tests fail in case of illegal accesses
                    jvmArgs "--illegal-access=deny"
                }

                jvmArgs "-Dinspectit.config.file-based.path=$projectDir/src/system-test/resources/config"
                // make inspectIT scan the workdir for configs
                jvmArgs "-Dinspectit.publishOpenTelemetryToBootstrap=true"  // make inspectIT push OTEL to the bootstrap
                jvmArgs jacoco.asJvmArg + ",inclbootstrapclasses=true"
                // JaCoCo agent first + bootstrap instrumentation
                jvmArgs "-javaagent:${agentJarPath}"  // Our agent second.

                // stricter checker makes sure that {@link Scope}s are closed on the correct thread and
                // that they are not garbage collected before being closed.
                jvmArgs "-Dio.opentelemetry.context.enableStrictContext=true"

                // enable reflection used in TestUtils#initializeOpenTelemetryForSystemTesting for JDK 11 and later
                if(JavaVersion.current() >= JavaVersion.VERSION_11) {
                    // --add-opens has the following syntax: {A}/{package}={B}
                    jvmArgs "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED"
                }

                jacoco.enabled = false  // Don't add the JaCoCo agent again.

                // stricter checker makes sure that {@link Scope}s are closed on the correct thread and
                // that they are not garbage collected before being closed.
                jvmArgs "-Dio.opentelemetry.context.enableStrictContext=true"

            }

            doFirst { logger.lifecycle("Running system tests using ${javaExecutable}.") }
        }

        systemTest.dependsOn perVersionSystemTest
    }
}
systemTest.mustRunAfter test
check.dependsOn systemTest

jmh {

    /**
     * Use -PjmhInclude='regular expression' to specify what tests to run with JMH.
     */
    if (project.hasProperty('jmhInclude')) {
        String regex = project.getProperty('jmhInclude')
        println "Filtering for JMH-Tests matching to regex: " + regex
        include = [regex]
    }

    /**
     * Use -jmhProfiler='profiler name and settings' to specify what profiler to run with JMH.
     */
    if (project.hasProperty('jmhProfiler')) {
        String profiler = project.getProperty('jmhProfiler')
        println "Using profiler for JMH tests: " + profiler
        profilers = [profiler]
    }

    /**
     * Use -jmhFlightRecorder=true to add Flight recorder options to the JVM args. You'll need openJDK 11 or OracleJDK 8.
     */
    def allJmvArgs = []
    if (project.hasProperty('jmhFlightRecorder')) {
        def recordingFile = "rec-jmh-${project.name}-${System.currentTimeMillis()}.jfr"
        def frProperties = "-XX:StartFlightRecording=duration=10s,delay=10s,filename=${recordingFile}".toString()
        allJmvArgs.addAll(['-XX:+UnlockCommercialFeatures', '-XX:+FlightRecorder', '-XX:+UnlockDiagnosticVMOptions', '-XX:+DebugNonSafepoints', frProperties, '-Djavax.xml.parsers.SAXParserFactory=com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl'])
    }

    String loggingPath = "-Dinspectit.logging.file.path=$buildDir/jmh/inspectit-logs".toString()
    String configPath = "-Dinspectit.config.file-based.path=$projectDir/src/jmh/resources/config".toString()
    String agentSetup = "-javaagent:${agentJarPath}".toString()

    allJmvArgs.addAll([loggingPath, configPath, agentSetup])
    jvmArgs = allJmvArgs

    // output of results and duplicateClassesStrategy
    humanOutputFile = file("$buildDir/jmh/human.txt")
    resultsFile = file("$buildDir/jmh/results.txt")
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE

    // shared settings if not defined on the class level
    warmupIterations = 3
    warmup = '3s'
    iterations = 5
    timeOnIteration = '3s'
    fork = 1
}
tasks.jmh.dependsOn jar